<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云OSS+PicGo图床的防盗链设置</title>
      <link href="/2023/09/13/aliyun-picgo/"/>
      <url>/2023/09/13/aliyun-picgo/</url>
      
        <content type="html"><![CDATA[<h1 id="图片上传成功，出现显示问题："><a href="#图片上传成功，出现显示问题：" class="headerlink" title="图片上传成功，出现显示问题："></a>图片上传成功，出现显示问题：</h1><ol><li>在PicGo上图片不显示</li><li>Typora上的图片上传过后，变得无法显示</li><li>坚果云上的图片也无法显示</li></ol><h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><p>小白一枚，猜测是：这些图片在平台的显示依靠的是图片链接，我们不允许<code>空Referer</code>，从而图片无法在白名单外仅依靠链接去显示。</p><h1 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h1><p><code>空Referer</code> -&gt; 允许</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131849853.png" alt="image-20230913184915180"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题 </tag>
            
            <tag> 图床 </tag>
            
            <tag> 阿里云OSS </tag>
            
            <tag> 防盗链 </tag>
            
            <tag> Picgo </tag>
            
            <tag> 图片显示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/09/12/Git/"/>
      <url>/2023/09/12/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><h2 id="一、初始化仓库"><a href="#一、初始化仓库" class="headerlink" title="一、初始化仓库"></a>一、初始化仓库</h2><h3 id="1-创建空目录mkdir-learngit创建learngit文件夹cd-learngit进入learngit文件夹pwd显示当前目录"><a href="#1-创建空目录mkdir-learngit创建learngit文件夹cd-learngit进入learngit文件夹pwd显示当前目录" class="headerlink" title="1.创建空目录mkdir learngit创建learngit文件夹cd learngit进入learngit文件夹pwd显示当前目录"></a>1.创建空目录<code>mkdir learngit</code>创建learngit文件夹<code>cd learngit</code>进入learngit文件夹<code>pwd</code>显示当前目录</h3><h3 id="2-把这个目录变成git可以管理的仓库git-init会在改目录下创建一个-git目录，这不是工作区，而是Git的版本库。同时，会自动为我们创建master分支"><a href="#2-把这个目录变成git可以管理的仓库git-init会在改目录下创建一个-git目录，这不是工作区，而是Git的版本库。同时，会自动为我们创建master分支" class="headerlink" title="2.把这个目录变成git可以管理的仓库git init会在改目录下创建一个.git目录，这不是工作区，而是Git的版本库。同时，会自动为我们创建master分支"></a>2.把这个目录变成git可以管理的仓库<code>git init</code>会在改目录下创建一个<code>.git</code>目录，这不是工作区，而是Git的版本库。同时，会自动为我们创建<code>master</code>分支</h3><h2 id="二、在learngit下创建并编写一个readme-txt文件"><a href="#二、在learngit下创建并编写一个readme-txt文件" class="headerlink" title="二、在learngit下创建并编写一个readme.txt文件"></a>二、在<code>learngit</code>下创建并编写一个<code>readme.txt</code>文件</h2><h2 id="cat-readme-txt查看文件内容"><a href="#cat-readme-txt查看文件内容" class="headerlink" title="cat readme.txt查看文件内容"></a><code>cat readme.txt</code>查看文件内容</h2><h2 id="三、添加文件到Git仓库"><a href="#三、添加文件到Git仓库" class="headerlink" title="三、添加文件到Git仓库"></a>三、添加文件到Git仓库</h2><h3 id="1-git-add-readme-txt，把文件添加到仓库git-add可以反复使用，添加多个文件"><a href="#1-git-add-readme-txt，把文件添加到仓库git-add可以反复使用，添加多个文件" class="headerlink" title="1.git add readme.txt，把文件添加到仓库git add可以反复使用，添加多个文件"></a>1.<code>git add readme.txt</code>，把文件添加到仓库<code>git add</code>可以反复使用，添加多个文件</h3><h3 id="2-git-commit-m-quot-wrote-a-readme-file-quot-，把文件提交到仓库-m-quot-xxx-quot-是本次提交的说明"><a href="#2-git-commit-m-quot-wrote-a-readme-file-quot-，把文件提交到仓库-m-quot-xxx-quot-是本次提交的说明" class="headerlink" title="2.git commit -m &quot;wrote a readme file&quot;，把文件提交到仓库-m &quot;xxx&quot;是本次提交的说明"></a>2.<code>git commit -m &quot;wrote a readme file&quot;</code>，把文件提交到仓库<code>-m &quot;xxx&quot;</code>是本次提交的说明</h3><h1 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h1><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><h3 id="git-status-查看仓库当前状态-git-diff在文件修改后，查看修改内容"><a href="#git-status-查看仓库当前状态-git-diff在文件修改后，查看修改内容" class="headerlink" title="git status 查看仓库当前状态### git diff在文件修改后，查看修改内容"></a><code>git status </code>查看仓库当前状态### <code>git diff</code>在文件修改后，查看修改内容</h3><h3 id="提交修改和提交文件步骤是一样的"><a href="#提交修改和提交文件步骤是一样的" class="headerlink" title="提交修改和提交文件步骤是一样的"></a>提交修改和提交文件步骤是一样的</h3><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="HEAD-指向当前版本eg-wrote-a-readme-file-gt-the-second-commit-gt-the-third-commitHEAD-指向the-third-commit"><a href="#HEAD-指向当前版本eg-wrote-a-readme-file-gt-the-second-commit-gt-the-third-commitHEAD-指向the-third-commit" class="headerlink" title="HEAD 指向当前版本eg.wrote a readme file-&gt;the second commit-&gt;the third commitHEAD 指向the third commit"></a>HEAD 指向当前版本eg.<code>wrote a readme file</code>-&gt;<code>the second commit</code>-&gt;<code>the third commit</code>HEAD 指向<code>the third commit</code></h3><h3 id="git-log查看提交历史git-log-pretty-oneline使显示的提交历史更简洁"><a href="#git-log查看提交历史git-log-pretty-oneline使显示的提交历史更简洁" class="headerlink" title="git log查看提交历史git log --pretty=oneline使显示的提交历史更简洁"></a><code>git log</code>查看提交历史<code>git log --pretty=oneline</code>使显示的提交历史更简洁</h3><h3 id="git-reset-hard-HEAD-穿梭到上一版本回到the-second-commit"><a href="#git-reset-hard-HEAD-穿梭到上一版本回到the-second-commit" class="headerlink" title="git reset --hard HEAD^穿梭到上一版本回到the second commit"></a><code>git reset --hard HEAD^</code>穿梭到上一版本回到<code>the second commit</code></h3><h3 id="git-reset-hard-third-commit-id穿梭到未来版本"><a href="#git-reset-hard-third-commit-id穿梭到未来版本" class="headerlink" title="git reset --hard third_commit_id穿梭到未来版本"></a><code>git reset --hard third_commit_id</code>穿梭到未来版本</h3><h3 id="git-reflog查看历史命令，含commit-id"><a href="#git-reflog查看历史命令，含commit-id" class="headerlink" title="git reflog查看历史命令，含commit_id"></a><code>git reflog</code>查看历史命令，含<code>commit_id</code></h3><h2 id="工作区和暂存区（stage）"><a href="#工作区和暂存区（stage）" class="headerlink" title="工作区和暂存区（stage）"></a>工作区和暂存区（stage）</h2><h3 id="工作区，我们能看到的目录，在此为learngit文件夹"><a href="#工作区，我们能看到的目录，在此为learngit文件夹" class="headerlink" title="工作区，我们能看到的目录，在此为learngit文件夹"></a>工作区，我们能看到的目录，在此为<code>learngit</code>文件夹</h3><h3 id="版本库，包含master分支和其他东西，最重要的是暂存区stage"><a href="#版本库，包含master分支和其他东西，最重要的是暂存区stage" class="headerlink" title="版本库，包含master分支和其他东西，最重要的是暂存区stage"></a>版本库，包含<code>master</code>分支和其他东西，最重要的是<code>暂存区stage</code></h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131842010.jpg" alt="202309122112598"><br>我们的文件在<strong>工作区</strong>，<code>git add</code>把文件添加<strong>版本库</strong>的<strong>暂存区</strong>，<code>git commit</code>把<strong>暂存区</strong>中的文件一次性全部提交到<code>master</code>分支下。</p><h3 id="Untracked-file工作区中未添加到暂存区的文件"><a href="#Untracked-file工作区中未添加到暂存区的文件" class="headerlink" title="Untracked file工作区中未添加到暂存区的文件"></a><code>Untracked file</code><strong>工作区</strong>中未添加到<strong>暂存区</strong>的文件</h3><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><h3 id="Git管理的是修改，而非文件"><a href="#Git管理的是修改，而非文件" class="headerlink" title="Git管理的是修改，而非文件"></a>Git管理的是修改，而非文件</h3><p>eg. </p><ol><li>在<code>readme.txt</code>添加一行<code>the first append</code></li><li><code>git add readme.txt</code></li><li>再在<code>readme.txt</code>添加一行<code>the second append</code></li><li><code>git commit</code></li><li><code>cat readme.txt</code>，显示的<code>the second append</code></li><li><code>git diff HEAD -- readme.txt</code>，<br>显示<code>-the first append</code><br>    <code>+the second append</code><br>工作区和版本库中最新版本的确实不一样</li><li>这是因为把<strong>修改的文件</strong>提交，Git管理的是<strong>文件的修改</strong>，而非<strong>文件本身</strong>，<code>readme.txt的the first append</code>这一修改<code>add``commit</code>，而<code>readme.txt的the second append</code>这一修改没有<code>add</code>，因此Git不把它作为<strong>版本库中的最新版本</strong>。</li></ol><h3 id="每次修改需要add到暂存区，再commit到master。"><a href="#每次修改需要add到暂存区，再commit到master。" class="headerlink" title="每次修改需要add到暂存区，再commit到master。"></a>每次修改需要<code>add</code>到<strong>暂存区</strong>，再<code>commit</code>到<code>master</code>。</h3><p>如上例所示，要将<code>the second append</code>作为版本库中的最新版本，可以这样做：<br>第一次修改-&gt;<code>add</code>-&gt;第二次修改-&gt;<code>add</code>-&gt;<code>commit</code></p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="git-checkout-file"><a href="#git-checkout-file" class="headerlink" title="git checkout -- file"></a><code>git checkout -- file</code></h3><p>eg. </p><ol><li>修改<code>readme.txt</code>，如果文件仍在<strong>工作区</strong>，可以手动修改文件内容，或者使用<code>git checkout -- readme.txt</code>，撤销修改回到和版本库中的状态一模一样。</li><li>如果文件<code>add</code>到<strong>暂存区</strong>，修改了<code>readme.txt</code>，使用<code>git checkout -- readme.txt</code>，撤销修改回到<code>add</code>到<strong>暂存区</strong>时的状态。</li></ol><h3 id="git-reset-HEAD-file"><a href="#git-reset-HEAD-file" class="headerlink" title="git reset HEAD file"></a><code>git reset HEAD file</code></h3><p>当把<code>readme.txt</code>修改后<code>add</code>到<strong>暂存区</strong>，可以使用<code>git reset HEAD readme.txt</code>，把<strong>暂存区</strong>的修改撤销掉（unstage），重新放回<strong>工作区</strong>。<br><strong><code>reset</code>可以版本回退，也可以撤销修改。</strong></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="git-rm-file删除在工作区和暂存区中的文件"><a href="#git-rm-file删除在工作区和暂存区中的文件" class="headerlink" title="git rm file删除在工作区和暂存区中的文件"></a><code>git rm file</code>删除在<strong>工作区</strong>和<strong>暂存区</strong>中的文件</h3><p><code>git rm</code>之后仍要<code>git commit</code></p><h3 id="git-rm-cached-file把文件从暂存区移出（从跟踪清单中移出）"><a href="#git-rm-cached-file把文件从暂存区移出（从跟踪清单中移出）" class="headerlink" title="git rm --cached file把文件从暂存区移出（从跟踪清单中移出）"></a><code>git rm --cached file</code>把文件从<strong>暂存区</strong>移出（从跟踪清单中移出）</h3><h3 id="git-rm-f-file强制删除暂存区中被修改的文件"><a href="#git-rm-f-file强制删除暂存区中被修改的文件" class="headerlink" title="git rm -f file强制删除暂存区中被修改的文件"></a><code>git rm -f file</code>强制删除<strong>暂存区</strong>中<em><strong>被修改</strong></em>的文件</h3><h3 id="git-checkout-file恢复误删的文件"><a href="#git-checkout-file恢复误删的文件" class="headerlink" title="git checkout -- file恢复误删的文件"></a><code>git checkout -- file</code>恢复误删的文件</h3><p><code>git checkout</code>一键还原，用<strong>版本库</strong>里的版本替代<strong>工作区</strong>的版本，无论<strong>工作区</strong>是修改还是删除。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="本地Git仓库与GitHub仓库通过SSH链接"><a href="#本地Git仓库与GitHub仓库通过SSH链接" class="headerlink" title="本地Git仓库与GitHub仓库通过SSH链接"></a>本地Git仓库与GitHub仓库通过SSH链接</h2><h3 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建<code>SSH Key</code></h3><p>在用户主目录下，如果有<code>.ssh</code>目录，同时文件下有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，则可跳至下一步。<br>如果没有，打开Shell(Windows下打开 Git Bash)，创建<code>SSH Key</code><br><code>ssh-keygen -t rsa -C &quot;your email&quot;</code>，然后一路回车。</p><h3 id="2-在GitHub添加SSH-Key"><a href="#2-在GitHub添加SSH-Key" class="headerlink" title="2.在GitHub添加SSH Key"></a>2.在GitHub添加<code>SSH Key</code></h3><p>GitHub-&gt;<code>Accounting settings</code>-&gt;<code>SSH Key</code>-&gt;填上容易Title-&gt;在<code>Key</code>文本框里粘贴<code>id_rsa.pub</code>文件的内容-&gt;<code>Add Key</code></p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><h3 id="在GitHub上建立一个仓库（eg-learngit）"><a href="#在GitHub上建立一个仓库（eg-learngit）" class="headerlink" title="在GitHub上建立一个仓库（eg.learngit）"></a>在GitHub上建立一个仓库（eg.learngit）</h3><h3 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h3><p>在本地<code>learngit</code>仓库运行一下命令：<br><code>git remote add origin git@github.com:githubUserName/learngit.git</code></p><h3 id="第一次把本地库内容推送送到远程库"><a href="#第一次把本地库内容推送送到远程库" class="headerlink" title="第一次把本地库内容推送送到远程库"></a>第一次把本地库内容推送送到远程库</h3><p><code>git push -u origin main</code></p><h3 id="后续把本地库内容推送到远程库"><a href="#后续把本地库内容推送到远程库" class="headerlink" title="后续把本地库内容推送到远程库"></a>后续把本地库内容推送到远程库</h3><p><code>git push origin main</code></p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><h3 id="以上情况是先有本地库，后创建远程库与之关联，接下来的方式是先创建远程库，后从远程库克隆。"><a href="#以上情况是先有本地库，后创建远程库与之关联，接下来的方式是先创建远程库，后从远程库克隆。" class="headerlink" title="以上情况是先有本地库，后创建远程库与之关联，接下来的方式是先创建远程库，后从远程库克隆。"></a>以上情况是先有本地库，后创建远程库与之关联，接下来的方式是先创建远程库，后从远程库克隆。</h3><h3 id="创建远程库（eg-gitskills）"><a href="#创建远程库（eg-gitskills）" class="headerlink" title="创建远程库（eg.gitskills）"></a>创建远程库（eg.gitskills）</h3><h3 id="从远程库克隆一个本地库"><a href="#从远程库克隆一个本地库" class="headerlink" title="从远程库克隆一个本地库"></a>从远程库克隆一个本地库</h3><p><code>git clone git@github.com:githubUserName/gitskills.git</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GiteePicGo</title>
      <link href="/2023/09/12/GiteePicGo/"/>
      <url>/2023/09/12/GiteePicGo/</url>
      
        <content type="html"><![CDATA[<h1 id="问题：上传图片失败404"><a href="#问题：上传图片失败404" class="headerlink" title="问题：上传图片失败404"></a>问题：上传图片失败404</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131907975.png" alt="202309122109469"></p><h1 id="自身设置："><a href="#自身设置：" class="headerlink" title="自身设置："></a>自身设置：</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131908758.png" alt="202309122109132"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131908334.png" alt="202309122109288"></p><h1 id="解决方法：将branch的master改为main"><a href="#解决方法：将branch的master改为main" class="headerlink" title="解决方法：将branch的master改为main"></a>解决方法：将<code>branch</code>的<code>master</code>改为<code>main</code></h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131908881.png" alt="202309122109624"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题 </tag>
            
            <tag> PicGo </tag>
            
            <tag> Gitee </tag>
            
            <tag> 图床 </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IEAD_Lombok问题</title>
      <link href="/2023/09/10/IEAD_Lombok/"/>
      <url>/2023/09/10/IEAD_Lombok/</url>
      
        <content type="html"><![CDATA[<h1 id="lombok问题"><a href="#lombok问题" class="headerlink" title="lombok问题"></a>lombok问题</h1><h2 id="问题描述：IDEA自带的Lombok插件已打开，输入-Getter自动导包，显示注释类型不适合，如下图"><a href="#问题描述：IDEA自带的Lombok插件已打开，输入-Getter自动导包，显示注释类型不适合，如下图" class="headerlink" title="问题描述：IDEA自带的Lombok插件已打开，输入@Getter自动导包，显示注释类型不适合，如下图"></a>问题描述：IDEA自带的Lombok插件已打开，输入@Getter自动导包，显示注释类型不适合，如下图</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131913134.png" alt="202309102209490"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131913738.png" alt="202309102209592"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131913928.png" alt="202309102210503"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li><p>在maven repository官网搜索Lombok</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131914635.png" alt="202309102210877"></p></li><li><p>选一个版本进入下载lombok.jar</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131914883.png" alt="202309102210797"></p></li><li><p>新建一个文件夹，并把该.jar文件放到文件夹下面</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131914893.png" alt="202309102210269"></p></li><li><p>右击lombok.jar文件，找到<code>Add as Library</code>，弹出<code>Create Library</code>-&gt;ok</p></li><li><p><code>setting</code>-&gt;<code>Build,Execution,Deployment</code>-&gt;<code>Compiler</code>-&gt;<code>Annotation Processors</code>，勾选<code>Enable annotation processing</code> -&gt;ok</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131915497.png" alt="202309102210199"></p></li><li><p>使用@Getter和@Setter就正常了</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131915429.png" alt="202309102210656"></p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>解决方法第5点一定要把<code>Enable annotation processing</code>勾上，不然会出现以下问题</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131915213.png" alt="202309102210994"></p></li><li><p>如果还是有问题，请重启</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
            <tag> Lombok </tag>
            
            <tag> 注解 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/2023/07/11/STL/"/>
      <url>/2023/07/11/STL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用函数</title>
      <link href="/2023/05/27/CommonFunctions/"/>
      <url>/2023/05/27/CommonFunctions/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">//类似于清屏函数，光标移动到原点位置进行重画</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE handle = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">COORD pos;</span><br><span class="line">pos.X = x;</span><br><span class="line">pos.Y = y;</span><br><span class="line"><span class="built_in">SetConsoleCursorPosition</span>(handle, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HideCursor</span><span class="params">()</span> <span class="comment">//隐藏光标 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hOut = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">CONSOLE_CURSOR_INFO cci;</span><br><span class="line"><span class="built_in">GetConsoleCursorInfo</span>(hOut, &amp;cci);</span><br><span class="line">cci.bVisible = FALSE;</span><br><span class="line"><span class="built_in">SetConsoleCursorInfo</span>(hOut, &amp;cci);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BeginBatchDraw</span>()   <span class="comment">//开始批量绘制</span></span><br><span class="line"><span class="built_in">FlushBatchcDraw</span>()  <span class="comment">//执行未完成的绘制任务</span></span><br><span class="line"><span class="built_in">EndBatchDraw</span>()     <span class="comment">// 结束批量绘制，并执行未完成的绘制任务</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法学习笔记</title>
      <link href="/2023/04/27/AlgorithmicStudyNotes/"/>
      <url>/2023/04/27/AlgorithmicStudyNotes/</url>
      
        <content type="html"><![CDATA[<h1 id="第二讲-数据结构"><a href="#第二讲-数据结构" class="headerlink" title="第二讲 数据结构"></a>第二讲 数据结构</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="题目-830-单调栈"><a href="#题目-830-单调栈" class="headerlink" title="题目 830. 单调栈"></a>题目 <a href="https://www.acwing.com/problem/content/832/">830. 单调栈</a></h3><p>给定一个长度为N的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><p><strong>输入格式</strong><br>第一行包含整数N，表示数列长度。<br>第二行包含 N个整数，表示整数数列。</p><p><strong>输出格式</strong><br>共一行，包含N个整数，其中第 i个数表示第 i个数的左边第一个比它小的数，如果不存在则输出 −1。</p><p><strong>数据范围</strong><br>1≤N≤105<br>1≤数列中元素≤109</p><p><strong>输入样例：</strong><br><code>5</code><br><code>3 4 2 7 5</code></p><p><strong>输出样例：</strong><br><code>-1 3 -1 2 2</code></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由题目，关键词为：<code>比第i个数小</code>且<code>离它最近</code></p><p>通过模拟可知，</p><ol><li>我们找<code>比第i个数小</code>时只考虑它的左边，且按从左到右的顺序对比，而考虑<code>离它最近</code>时，是按从右到左的，类似于<code>栈</code>的<code>先进后出</code>，所以本题用<code>栈</code>来完成；</li><li>当当前元素小于栈内元素时，栈内原有元素将不会被输出，所以我们可以在向栈存入元素时判断，当当前元素小于栈内元素时，弹出栈内元素，直到栈为空；</li><li>之后再将当前元素存入栈内；</li><li>符合<code>离它最近</code>，应该是栈顶元素，所以判断栈顶元素是否小于当前元素，是则输出栈顶元素，否则输出-1。<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131918225.png" alt="aca736dc982d8ed291cc3ed6ae3dc6d"></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N],tt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=x) tt--;   <span class="comment">//栈不为空，且栈内元素大于等于x，则把它们弹出</span></span><br><span class="line">        <span class="keyword">if</span>(tt) cout&lt;&lt;stk[tt]&lt;&lt;<span class="string">&quot; &quot;</span>;   <span class="comment">//剩下的都是小于x的数，栈顶元素是离x最近的</span></span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        stk[++tt]=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h3 id="题目-154-滑动窗口"><a href="#题目-154-滑动窗口" class="headerlink" title="题目 154. 滑动窗口"></a>题目 <a href="https://www.acwing.com/problem/content/156/">154. 滑动窗口</a></h3><p>给定一个大小为 n≤10^6的数组。<br>有一个大小为 k的滑动窗口，它从数组的最左边移动到最右边。<br>你只能在窗口中看到 k个数字。<br>每次滑动窗口向右移动一个位置。</p><p>以下是一个例子：<br>该数组为 [1 3 -1 -3 5 3 6 7]，k为 3。</p><table><thead><tr><th align="center">窗口位置</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">[1 3 -1] -3 5 3 6 7</td><td align="center">-1</td><td align="center">3</td></tr><tr><td align="center">1 [3 -1 -3] 5 3 6 7</td><td align="center">-3</td><td align="center">3</td></tr><tr><td align="center">1 3 [-1 -3 5] 3 6 7</td><td align="center">-3</td><td align="center">5</td></tr><tr><td align="center">1 3 -1 [-3 5 3] 6 7</td><td align="center">-3</td><td align="center">5</td></tr><tr><td align="center">1 3 -1 -3 [5 3 6] 7</td><td align="center">3</td><td align="center">6</td></tr><tr><td align="center">1 3 -1 -3 5 [3 6 7]</td><td align="center">3</td><td align="center">7</td></tr><tr><td align="center">你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>输入格式</strong><br>输入包含两行。<br>第一行包含两个整数 n和 k，分别代表数组长度和滑动窗口的长度。<br>第二行有 n个整数，代表数组的具体数值。<br>同行数据之间用空格隔开。</p><p><strong>输出格式</strong><br>输出包含两个。<br>第一行输出，从左至右，每个位置滑动窗口中的最小值。<br>第二行输出，从左至右，每个位置滑动窗口中的最大值。<br><strong>输入样例：</strong><br><code>8 3</code><br><code>1 3 -1 -3 5 3 6 7</code><br><strong>输出样例：</strong><br><code>-1 -3 -3 -3 3 3</code><br><code>3 3 5 5 6 7</code></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><blockquote><p>以找最小值为例（窗口长度为3）</p></blockquote><ol><li>如果有这么一组数<code>1 2 3 4</code>，窗口从<code>1 2 3</code>变为<code>1 2 3 4</code>时是不符合题目要求的，要把窗口第一个数<code>1</code>弹出；</li><li>当我们移动窗口时，可以发现有些元素永远不会被输出，因为它们比最新加入的值小，所以在窗口中，每向右移动一次（一次一个元素），把当前元素和窗口尾部元素做对比，当当前元素小于窗口尾部元素即窗口尾部元素之后将不会被输出，所以把窗口尾部元素弹出，直到比对条件不满足退出循环；</li><li>之后，再把当前元素存入窗口；</li><li>由下图1可知，符合条件时，输出的是窗口中的第一个元素。<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131918271.png" alt="d518676680a9563180f8a5abd2cf334"><br>因为我们是用数组来模拟队列，所以把窗口中的值改为数组元素对应的下标<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131918531.png" alt="aa37100c0010e685dc8a923120bee80"></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], q[N]; <span class="comment">//q存的是下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断窗口是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - q[hh] + <span class="number">1</span> &gt; k) hh++;   <span class="comment">// i-k+1&gt;q[hh]</span></span><br><span class="line">        <span class="comment">//判断当前元素是否小于队尾元素，是则删除队尾元素</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//把当前元素存入队列</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断窗口是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - q[hh] + <span class="number">1</span> &gt; k) hh++;   <span class="comment">// i-k+1&gt;q[hh]</span></span><br><span class="line">        <span class="comment">//判断当前元素是否大于队尾元素，是则删除队尾元素</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//把当前元素存入队列</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> yxc </tag>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入校验</title>
      <link href="/2023/04/22/Error_Input/"/>
      <url>/2023/04/22/Error_Input/</url>
      
        <content type="html"><![CDATA[<p> <strong>错误输入4x4</strong>：”cin&gt;&gt;”只读取整型，而存在的非整型会让程序进入循环</p><ul><li><strong>cin.fail()</strong>: 判断输入是否失败</li><li><strong>cin.igonre()</strong>:用于从输入流中读取并忽略一定数量的字符<ul><li><p><strong>作用</strong>：清除输入缓冲区中的残留字符，以确保下一次输入从一个干净的状态开始</p></li><li><p>cin.ignore() 的第一个参数指定要读取和忽略的字符数，第二个参数指定要忽略的特定字符。</p><ul><li><p>例如，以下代码会忽略输入流中的所有字符直到第一个换行符：<br>   <code>cin.ignore(numeric_limits&lt;streamsize&gt;::max(), &#39;\n&#39;);</code></p></li><li><p>而如果没有指定任何参数，它将忽略缓冲区中的第一个字符<br><code>cin.ignore();</code></p></li></ul></li></ul></li><li><strong>cin.ignore(numeric_limits<streamsize>::max(), ‘\n’)</strong>:忽略输入流中的所有字符，直到遇到换行符为止。<ul><li>‘numeric_limits<streamsize>::max()’表示忽略输入流中的所有字符，直到达到输入流的最大长度为止。</li><li>‘\n’表示忽略输入流中的所有字符，直到遇到换行符为止。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int bookid;</span><br><span class="line">cout &lt;&lt; &quot;输入图书编号：&quot;;  </span><br><span class="line">cin &gt;&gt; bookid;</span><br><span class="line">cin.ignore(); // 清除输入流缓冲区中的换行符</span><br><span class="line">while (cin.fail())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;输入错误，请重新输入整数类型的值：&quot;;</span><br><span class="line">cin.clear(); // 清除错误标志</span><br><span class="line">cin.ignore(numeric_limits&lt;streamsize&gt;::max(), &#x27;\n&#x27;); // 忽略缓冲区中的错误字符</span><br><span class="line">cin &gt;&gt; bookid; // 重新读取输入</span><br><span class="line">cin.ignore(); // 再次清除输入流缓冲区中的换行符</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2023/04/17/First_Blog_Post/"/>
      <url>/2023/04/17/First_Blog_Post/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><hr><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is row20</span><br><span class="line"></span><br><span class="line">This is row22</span><br><span class="line"></span><br><span class="line">新起段落需要在两个段之间空一行</span><br></pre></td></tr></table></figure><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在末尾添加2个空格  </span><br><span class="line">然后直接回车</span><br><span class="line">就能换行了  </span><br></pre></td></tr></table></figure><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p><code>**粗体**</code><br><strong>左右各加两个star</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p><code>*斜体*</code><br><em>左右各加一个star</em></p><h2 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h2><p><code>***粗斜体***</code><br><em><strong>左右各加三个star</strong></em></p><h2 id="划线"><a href="#划线" class="headerlink" title="划线"></a><del>划线</del></h2><p><code> ~~划线~~</code><br><del>左右各加两个波浪号</del></p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="单段引用"><a href="#单段引用" class="headerlink" title="单段引用"></a>单段引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是单段引用 </span><br></pre></td></tr></table></figure><blockquote><p>这是单段引用</p></blockquote><h2 id="多段块引用"><a href="#多段块引用" class="headerlink" title="多段块引用"></a>多段块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是第一段</span></span><br><span class="line"><span class="quote">&gt; 这是第二段</span></span><br><span class="line"><span class="quote">&gt; 这是第三段</span></span><br></pre></td></tr></table></figure><blockquote><p>这是第一段<br>这是第二段<br>这是第三段</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是第一段</span></span><br><span class="line"><span class="quote">&gt; 这是第二段</span></span><br><span class="line">&gt;&gt; 这是第二段里的一个引用</span><br><span class="line">&gt;这是第三段</span><br></pre></td></tr></table></figure><blockquote><p>这是第一段<br>这是第二段</p><blockquote><p>这是第二段里的一个引用<br>这是第三段</p></blockquote></blockquote><h2 id="其他元素引用"><a href="#其他元素引用" class="headerlink" title="其他元素引用"></a>其他元素引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 普通引用</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 第二段</span></span><br><span class="line">&gt;- （圈圈）这是第二段的圈圈的引用</span><br><span class="line">&gt;&gt;- 圈圈的引用</span><br><span class="line">&gt;&gt;&gt;- 圈圈的引用的引用</span><br><span class="line"><span class="quote">&gt; haha</span></span><br><span class="line">&gt;- 这是带圈圈的第二段</span><br><span class="line"><span class="quote">&gt; 第三段：发现在&#x27;&gt;&#x27;后面加上&#x27;-&#x27;，会让这一段成为上一段的嵌套段</span></span><br><span class="line"><span class="quote">&gt; 为什么出不去了？</span></span><br></pre></td></tr></table></figure><blockquote><p>普通引用</p><p>第二段</p><ul><li>（圈圈）这是第二段的圈圈的引用<blockquote><ul><li>圈圈的引用<blockquote><ul><li>圈圈的引用的引用<br>haha</li></ul></blockquote></li></ul></blockquote></li><li>这是带圈圈的第二段<br>第三段：发现在’&gt;’后面加上’-‘，会让这一段成为上一段的嵌套段<br>为什么出不去了？</li></ul></blockquote><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote><p>在内容前加上数字及一个. ，数字可以无序，但渲染出来的是有序的。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> first</span><br><span class="line"><span class="bullet">2.</span> second</span><br><span class="line"><span class="bullet">   1.</span> second 1</span><br><span class="line"><span class="bullet">   2.</span> second 2</span><br><span class="line"><span class="bullet">   5.</span> second 5</span><br><span class="line"><span class="bullet">3.</span> four</span><br><span class="line"><span class="bullet">4.</span> six</span><br></pre></td></tr></table></figure><ol><li>first</li><li>second<ol><li>second 1</li><li>second 2</li><li>second 5</li></ol></li><li>four</li><li>six</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote><p>在内容前加上’-‘ 或 ‘+’ 或 ‘*’ </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> first</span><br><span class="line"><span class="bullet">-</span> second</span><br><span class="line"><span class="bullet">  -</span> second 1</span><br><span class="line"><span class="bullet">  -</span> second 3</span><br><span class="line"><span class="bullet">-</span> three</span><br><span class="line"><span class="bullet">-</span> four</span><br><span class="line"><span class="bullet">+</span> 变更内容前的符号会换段落</span><br><span class="line"><span class="bullet">+</span> 这是+</span><br><span class="line"><span class="bullet">+</span> six</span><br></pre></td></tr></table></figure><ul><li>first</li><li>second<ul><li>second 1</li><li>second 3</li></ul></li><li>three</li><li>four</li></ul><ul><li>变更内容前的符号会换段落</li><li>这是+</li><li>six</li></ul><hr><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以下三种均可表示分割线</span><br><span class="line"></span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="制作表格"><a href="#制作表格" class="headerlink" title="制作表格"></a>制作表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入 | 输出 |</span><br><span class="line">| ---  | --- | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>x</td><td>y</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><h3 id="左对齐"><a href="#左对齐" class="headerlink" title="左对齐"></a>左对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| :--  | :--- | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">输入变量</th><th align="right">输出变量</th></tr></thead><tbody><tr><td align="right">x</td><td align="right">y</td></tr><tr><td align="right">2</td><td align="right">4</td></tr></tbody></table><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| :--:  | :---: | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">输入变量</th><th align="center">输出变量</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">y</td></tr><tr><td align="center">2</td><td align="center">4</td></tr></tbody></table><h3 id="右对齐"><a href="#右对齐" class="headerlink" title="右对齐"></a>右对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| --:  | ---: | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">输入变量</th><th align="right">输出变量</th></tr></thead><tbody><tr><td align="right">x</td><td align="right">y</td></tr><tr><td align="right">2</td><td align="right">4</td></tr></tbody></table><hr><h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><h2 id="代码句"><a href="#代码句" class="headerlink" title="代码句"></a>代码句</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a <span class="code">`word`</span> !</span><br></pre></td></tr></table></figure><p>This is a <code>word</code> !</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行   <span class="code">```编译语言</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            你的代码</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">最后一行 ```</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="纯图片"><a href="#纯图片" class="headerlink" title="纯图片"></a>纯图片</h2><blockquote><p>! [ <em>图片描述</em> ] ( <em>图片链接</em> )</p></blockquote><p><img src="https://images.pexels.com/photos/1261728/pexels-photo-1261728.jpeg?auto=compress&cs=tinysrgb&w=600" alt="这是图片"></p><h2 id="含链接的图片"><a href="#含链接的图片" class="headerlink" title="含链接的图片"></a>含链接的图片</h2><blockquote><p>[![ <em>图片描述</em> ] ( <em>图片链接</em> )] ( <em>跳转链接</em> )</p></blockquote><p><a href="https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png"><img src="https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png" alt="404"></a></p><hr><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h2><blockquote><p>[链接描述] (链接)</p></blockquote><p>这是一个链接 <a href="https://ezcatcat.github.io/">我的博客</a></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="网站-or-邮箱"><a href="#网站-or-邮箱" class="headerlink" title="网站 or 邮箱"></a>网站 or 邮箱</h3><blockquote><p>&lt; 网站链接 or 邮箱地址 &gt;</p></blockquote><p><a href="https://ezcatcat.github.io/">https://EzCatcat.github.io</a></p><p><a href="mailto:&#54;&#51;&#x30;&#x32;&#x32;&#55;&#54;&#53;&#56;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#54;&#51;&#x30;&#x32;&#x32;&#55;&#54;&#53;&#56;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></p><h3 id="包含其他语法"><a href="#包含其他语法" class="headerlink" title="包含其他语法"></a>包含其他语法</h3><p>这是<a href="https://ezcatcat.github.io/"><em>我的博客</em></a><br>这是 <a href="https://ezcatcat.github.io/"><strong>我的博客</strong></a><br>这是 <a href="https://ezcatcat.github.io/"><code>我的博客</code></a></p><hr><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><blockquote><p>点击正文中的脚注，会自动跳转转到脚注注释</p></blockquote><blockquote><p>正文中，[^ 描述]  , 描述：可以用 数字 or 英文 or 汉字<br>正文外，解释意思，[^ 描述]: xxx</p></blockquote><p>Here have a footnote <a href="footnote_one">^1</a> ,you can see.<a href="footnote_two">^footnote</a>.</p><hr><h1 id="任务列表框"><a href="#任务列表框" class="headerlink" title="任务列表框"></a>任务列表框</h1><blockquote><p>复选框格式： - [ ]  or - [x]<br>注意： - 与 [] 中间要有空格，[]中需包含一个 空格 or x </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 数电</span><br><span class="line"><span class="bullet">-</span> [x] 实验报告</span><br><span class="line"><span class="bullet">-</span> [ ] 高数</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 数电</li><li><input checked="" disabled="" type="checkbox"> 实验报告</li><li><input disabled="" type="checkbox"> 高数</li></ul><hr><h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><h2 id="从-emojipedia-复制粘贴到代码中"><a href="#从-emojipedia-复制粘贴到代码中" class="headerlink" title="从 emojipedia 复制粘贴到代码中"></a>从 <a href="https://emojipedia.org/">emojipedia</a> 复制粘贴到代码中</h2><p>Grapes🍇</p><h2 id="运用emoji符号简码"><a href="#运用emoji符号简码" class="headerlink" title="运用emoji符号简码"></a>运用emoji符号简码</h2><blockquote><p>在两个冒号中的，输入符号名称</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ :joy:</span><br><span class="line"></span><br><span class="line">哭哭 :cry:</span><br><span class="line"></span><br><span class="line">apple :apple:</span><br></pre></td></tr></table></figure><p>去露营了！ :tent: 很快回来。</p><p>真好笑！ :joy:</p><p>哭哭 :cry:</p><p>apple :apple:</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/15/hello_world/"/>
      <url>/2023/04/15/hello_world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
