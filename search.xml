<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2023/11/13/JavaWeb/"/>
      <url>/2023/11/13/JavaWeb/</url>
      
        <content type="html"><![CDATA[<p>  <img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022110530.png" alt="image-20231102211024566"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022115129.png" alt="image-20231102211547569"> </p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022222155.png" alt="image-20231102222230133"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022222517.png" alt="image-20231102222243558"></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h2><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022230035.png" alt="image-20231102223008843"></p><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><h4 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h4><p> <img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022233180.png" alt="image-20231102223348939"></p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022234139.png" alt="image-20231102223431098"></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022254164.png" alt="image-20231102225443116"></p><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022256218.png" alt="image-20231102225623217"></p><h2 id="DML：对表中数据进行增删改"><a href="#DML：对表中数据进行增删改" class="headerlink" title="DML：对表中数据进行增删改"></a>DML：对表中数据进行增删改</h2><h3 id="添加数据-–-insert"><a href="#添加数据-–-insert" class="headerlink" title="添加数据 – insert"></a>添加数据 – insert</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311040931531.png" alt="image-20231104093119417"></p><h3 id="修改数据-–-update"><a href="#修改数据-–-update" class="headerlink" title="修改数据 – update"></a>修改数据 – update</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311040949173.png" alt="image-20231104094956310"></p><h3 id="删除数据-–-delete"><a href="#删除数据-–-delete" class="headerlink" title="删除数据 – delete"></a>删除数据 – delete</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311040955147.png" alt="image-20231104095524010"></p><h2 id="DQL：对表中数据进行查询"><a href="#DQL：对表中数据进行查询" class="headerlink" title="DQL：对表中数据进行查询"></a>DQL：对表中数据进行查询</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041000156.png" alt="image-20231104100044813"></p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041002361.png" alt="image-20231104100221271"></p><blockquote><p><code>select name,math 数学成绩,english as 英语成绩 from stu;</code></p><p>as 也可以省略，但记得隔开一个空格</p></blockquote><h3 id="条件查询-–-where"><a href="#条件查询-–-where" class="headerlink" title="条件查询 – where"></a>条件查询 – where</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041013799.png" alt="image-20231104101312923"></p><blockquote><ol><li>年龄 大于18并且小于30</li></ol><p><code>select age from stu where age &gt;= 18 and age &lt;= 30;</code></p><p><code>select age from stu where between 18 and 30;</code></p><ol start="2"><li>年龄等于18 或者 20 或者 22</li></ol><p><code>select age from stu where age = 18 or age = 20 or age = 22;</code></p><p><code>select age from stu where age in (18, 20, 22); </code></p><p><em><strong>多行单列（同一种属性） – in</strong></em></p><ol start="3"><li>判定数据是否为空，不使用 &#x3D;    !&#x3D;，应用is   is not</li></ol></blockquote><h4 id="模糊查询-like"><a href="#模糊查询-like" class="headerlink" title="模糊查询 like"></a>模糊查询 like</h4><p>通配符：_单个字符，%多个字符（0-n）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 姓马</span><br><span class="line">SELECT * from stu where name like &#x27;马%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 第二个字是花</span><br><span class="line">SELECT * from stu where name like &#x27;_花%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 包含 德</span><br><span class="line">SELECT * from stu where name like &#x27;%德%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="排序查询-–-order-by"><a href="#排序查询-–-order-by" class="headerlink" title="排序查询 – order by"></a>排序查询 – order by</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041043013.png" alt="image-20231104104329019"></p><blockquote><p>按数学成绩降序排列，如果数学成绩一样，则英语成绩按降序排列</p><p><code>select * from stu order by math desc, english asc; </code></p><p>只有当前面条件的值一样时，才按后面条件进行排序</p></blockquote><h3 id="分组查询-–-group-by"><a href="#分组查询-–-group-by" class="headerlink" title="分组查询 – group by"></a>分组查询 – group by</h3><blockquote><p> <strong>聚合函数</strong></p><p> <img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041048863.png" alt="image-20231104104821437"></p><p> <code>select * from stu;</code>  </p><p> <code>select count(*) from stu;</code>  查询所有列可用 *</p></blockquote><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041057372.png" alt=" "></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311161947329.png" alt="image-20231116194733363"></p><h3 id="分页查询-–-limit"><a href="#分页查询-–-limit" class="headerlink" title="分页查询 – limit"></a>分页查询 – limit</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041112565.png" alt="image-20231104111211696"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041132322.png" alt="image-20231104113219515"> </p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041146926.png" alt="image-20231104114632787"></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041318058.png" alt="  "></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE if EXISTS emp;</span><br><span class="line">DROP TABLE if EXISTS dept;</span><br><span class="line"></span><br><span class="line">-- 创建部门表</span><br><span class="line">create table dept(</span><br><span class="line">id int PRIMARY KEY,</span><br><span class="line">name varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建员工表</span><br><span class="line">create table emp(</span><br><span class="line">id int PRIMARY KEY auto_increment,</span><br><span class="line">name varchar(50),</span><br><span class="line">dep int,</span><br><span class="line"></span><br><span class="line">CONSTRAINT fk_emp_dept FOREIGN KEY(dep) REFERENCES dept(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO dept (id, NAME)</span><br><span class="line">VALUES</span><br><span class="line">(1, &#x27;广州&#x27;),</span><br><span class="line">(2, &#x27;上海&#x27;);</span><br><span class="line"></span><br><span class="line">insert into emp(id,name,dep)</span><br><span class="line">VALUES</span><br><span class="line">(1,&#x27;张三&#x27;,1),</span><br><span class="line">(2,&#x27;李四&#x27;,1),</span><br><span class="line">(3,&#x27;王五&#x27;,2),</span><br><span class="line">(4,&#x27;啊六&#x27;,2);</span><br><span class="line"></span><br><span class="line">SELECT * from emp;</span><br><span class="line">SELECT * from dept;</span><br><span class="line"></span><br><span class="line">-- 删除外键</span><br><span class="line">ALTER TABLE emp DROP FOREIGN KEY fk_emp_dept;</span><br><span class="line"></span><br><span class="line">-- 创建外键</span><br><span class="line">ALTER TABLE emp ADD CONSTRAINT fk_emp_dept FOREIGN KEY(dep) REFERENCES dept(id);  </span><br></pre></td></tr></table></figure><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311161956921.png" alt="image-20231116195606981"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041525431.png" alt="image-20231104152546869"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041532919.png" alt="image-20231104153201617"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041532621.png" alt="image-20231104153232505"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041544714.png" alt="image-20231104154421649"></p><h3 id="表关系-–-多对多"><a href="#表关系-–-多对多" class="headerlink" title="表关系 – 多对多"></a>表关系 – 多对多</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041537681.png" alt="image-20231104153715257"></p><h3 id="表关系-–-一对一"><a href="#表关系-–-一对一" class="headerlink" title="表关系 – 一对一"></a>表关系 – 一对一</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041543894.png" alt="image-20231104154302840"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041543275.png" alt="image-20231104154317993"></p><h3 id="数据库设计案例"><a href="#数据库设计案例" class="headerlink" title="数据库设计案例"></a>数据库设计案例</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041548140.png" alt="image-20231104154830094"></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041603941.png" alt="image-20231104160329761"></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041611526.png" alt="image-20231104161158627"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041615370.png" alt="image-20231104161558509"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 隐式内连接</span><br><span class="line">SELECT * from emp,dept where emp.dep = dept.id;</span><br><span class="line">-- emp的id、name 和 dept的name</span><br><span class="line">SELECT emp.id,emp.name,dept.name from emp,dept where emp.dep = dept.id; </span><br><span class="line">-- 也可以起别名</span><br><span class="line">SELECT t1.id,t1.name,t2.name from emp t1,dept t2 where t1.dep = t2.id; </span><br><span class="line"></span><br><span class="line">-- 显式内连接</span><br><span class="line">select * from emp INNER JOIN dept ON emp.dep = dept.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 左外连接</span><br><span class="line">SELECT * from emp LEFT OUTER JOIN dept ON emp.dep = dept.id;</span><br><span class="line"></span><br><span class="line">-- 右外连接</span><br><span class="line">SELECT * from emp RIGHT OUTER JOIN dept ON emp.dep = dept.id;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041630109.png" alt="image-20231104163045903"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311041631192.png" alt="image-20231104163116560"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311042335437.png" alt="image-20231104233542685"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311042345110.png" alt="image-20231104234544068"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311042345102.png" alt="image-20231104234520150"></p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051143295.png" alt="image-20231105114313996"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051622452.png" alt="image-20231105162222646"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123123&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.定义SQL语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where name = &#x27;alice&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取执行SQL的对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.执行SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql); <span class="comment">//受影响行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.处理返回结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ol><li>获取执行SQL对象</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051710637.png" alt="image-20231105170954884"></p><ol start="2"><li>管理事务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> stmt.executeUpdate(sql1); <span class="comment">//受影响行数</span></span><br><span class="line">    System.out.println(count1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> stmt.executeUpdate(sql2); <span class="comment">//受影响行数</span></span><br><span class="line">    System.out.println(count2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">    <span class="comment">// 出现异常，回滚事务</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051759207.png" alt="image-20231105175925343"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051818644.png" alt="image-20231105181802267"></p><h5 id="PreparedStatement原理"><a href="#PreparedStatement原理" class="headerlink" title="PreparedStatement原理"></a>PreparedStatement原理</h5><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171243212.png" alt="image-20231117124306952"></p><p>预编译：检查SQL语法 + 编译SQL</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171245891.png" alt="image-20231117124506078"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171250139.png" alt="image-20231117125006169"></p><h5 id="手动重启mysql"><a href="#手动重启mysql" class="headerlink" title="手动重启mysql"></a>手动重启mysql</h5><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171247357.png" alt="image-20231117124750280"></p><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051715860.png" alt="image-20231105171508237"></p><h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051722336.png" alt="image-20231105172211630"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051727992.png" alt="image-20231105172710235"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311051747917.png" alt="image-20231105174720376"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171326248.png" alt="image-20231117132620359"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171326426.png" alt="image-20231117132655468"></p><h3 id="Druid使用步骤"><a href="#Druid使用步骤" class="headerlink" title="Druid使用步骤"></a>Druid使用步骤</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171328274.png" alt="image-20231117132805362"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.导入jar包</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.定义配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 3.加载配置文件</span></span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.获取数据库连接Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看当前路径"><a href="#查看当前路径" class="headerlink" title="查看当前路径"></a>查看当前路径</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311171337496.png" alt="image-20231117133713274"></p><h2 id="JDBC练习"><a href="#JDBC练习" class="headerlink" title="JDBC练习"></a>JDBC练习</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311172249397.png" alt="image-20231117224947160"></p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><code>ctrl + r </code>，查找替换</p><p><code>alt + 左键</code> or <code>中键 </code>  选中</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>数据库 tb_brand</p><p>实体类 Brand  （一般用包装类）</p><p>测试用例</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311172304701.png" alt="image-20231117230406462"></p><h4 id="考虑步骤：SQL语句、参数、结果"><a href="#考虑步骤：SQL语句、参数、结果" class="headerlink" title="考虑步骤：SQL语句、参数、结果"></a>考虑步骤：SQL语句、参数、结果</h4><ol start="0"><li>定义加载配置</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311172349699.png" alt="image-20231117234906762"></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311022249690.png" alt="image-20231102224925077"></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven的基本使用"><a href="#Maven的基本使用" class="headerlink" title="Maven的基本使用"></a>Maven的基本使用</h2><h3 id="Maven的常用命令"><a href="#Maven的常用命令" class="headerlink" title="Maven的常用命令"></a>Maven的常用命令</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132016844.png" alt="image-20231113201649401"></p><h3 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132031889.png" alt="image-20231113203108663"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132033459.png" alt="image-20231113203311674"></p><h2 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h2><h3 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132041668.png" alt="image-20231113204133785"></p><h3 id="IDEA导入Maven项目"><a href="#IDEA导入Maven项目" class="headerlink" title="IDEA导入Maven项目"></a>IDEA导入Maven项目</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132048055.png" alt="image-20231113204844856"></p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132109690.png" alt="image-20231113210931422"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311132123564.png" alt="image-20231113212333506"></p><h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181041893.png" alt="image-20231118104157032"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181048780.png" alt="image-20231118104823320"></p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="1-查询user表中所有数据"><a href="#1-查询user表中所有数据" class="headerlink" title="1.查询user表中所有数据"></a>1.查询user表中所有数据</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181115764.png" alt="image-20231118111547128"></p><blockquote><ol start="3"><li>配置文件</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181117163.png" alt="image-20231118111715854"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181119890.png" alt="image-20231118111910596"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.加载mybatis核心配置文件，获取SqlSessionFactory对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.执行sql</span></span><br><span class="line"><span class="comment">//List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"><span class="comment">// 通过sqlSession获取mapper接口的代理对象 // Mapper</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = mapper.selectAll();</span><br><span class="line"></span><br><span class="line">System.out.println(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h2 id="Mapper代理"><a href="#Mapper代理" class="headerlink" title="Mapper代理"></a>Mapper代理</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181448155.png" alt="image-20231118144850147"></p><blockquote><ol><li>注意package（.） 和 directory（&#x2F;）</li><li>映射文件（xx.xml）</li><li>在resource中创建文件夹，使编译后.xml和.class文件在同一目录下</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181518413.png" alt="image-20231118151857055"></p><ol start="4"><li><p>修改sql映射文件路径</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181518641.png" alt="image-20231118151819235"><br> <img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181525015.png" alt="image-20231118152534069"></p></li><li><p>修改映射文件namespace，为接口名（含路径）<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181515548.png" alt="image-20231118151522246"></p></li><li><p>在Mapper接口中定义方法<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181514215.png" alt="image-20231118151446229"></p></li><li><p>编码<br><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181517731.png" alt="image-20231118151722549"></p></li></ol></blockquote><h2 id="MyBatis核心配置文件-mybatis-config-xml"><a href="#MyBatis核心配置文件-mybatis-config-xml" class="headerlink" title="MyBatis核心配置文件 mybatis-config.xml"></a>MyBatis核心配置文件 mybatis-config.xml</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181532883.png" alt="image-20231118153250719"></p><h3 id="自动驼峰命名"><a href="#自动驼峰命名" class="headerlink" title="自动驼峰命名"></a>自动驼峰命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;  </span><br><span class="line">        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;  </span><br><span class="line">&lt;/settings&gt;  </span><br></pre></td></tr></table></figure><h2 id="驼峰和下划线命名"><a href="#驼峰和下划线命名" class="headerlink" title="*驼峰和下划线命名"></a>*驼峰和下划线命名</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311182029966.png" alt="image-20231118202955227"></p><h2 id="增删改查案例"><a href="#增删改查案例" class="headerlink" title="增删改查案例"></a>增删改查案例</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>数据库、实体类、测试用例</p><h3 id="1-5-步骤"><a href="#1-5-步骤" class="headerlink" title="1.5 步骤"></a>1.5 步骤</h3><p>MyBatis入门步骤，PojoMapper接口、xml</p><h3 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h3><h4 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181554578.png" alt="image-20231118155401246"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181654074.png" alt="image-20231118165406483"></p><h4 id="3种方法"><a href="#3种方法" class="headerlink" title="*3种方法"></a>*3种方法</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311182017725.png" alt="image-20231118201752826"></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ol><li>MyBatis传递多个参数时，需要用@Param注解，给参数起别名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;status&quot;)</span> <span class="type">int</span> status, <span class="meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>模糊查询</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311231042413.png" alt="image-20231118174207589"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311181742870.png" alt="image-20231118174255746"></p><h5 id="动态查询-–-多条件"><a href="#动态查询-–-多条件" class="headerlink" title="动态查询 – 多条件"></a>动态查询 – 多条件</h5><blockquote><p>标签 where 、 if</p></blockquote><p>没有where的话，and会造成语法错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByConditionMore&quot;</span>  resultMap=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">        and company_name like #&#123;companyName&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">        and brand_name like #&#123;brandName&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    ;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h5 id="动态查询-–-单条件"><a href="#动态查询-–-单条件" class="headerlink" title="动态查询 – 单条件"></a>动态查询 – 单条件</h5><blockquote><p>标签 choose(when, otherwise)</p><p>choose – switch, when – case, otherwise – defalut</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByConditionSingle&quot;</span> resultMap=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=<span class="string">&quot;status != null &quot;</span>&gt;</span><br><span class="line">                status = #&#123;status&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            company_name like #&#123;companyName&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            brand_name like #&#123;brandName&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">            <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    ;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="3-添加"><a href="#3-添加" class="headerlink" title="3.添加"></a>3.添加</h3><p>事务自动提交默认关闭</p><ol><li><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311182232487.png" alt="image-20231118223256599"></p></li><li><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311182233199.png" alt="image-20231118223349318"></p></li></ol><h4 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;add&quot;</span> useGeneratedKeys=<span class="string">&quot;true&quot;</span> keyProperty=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    insert into <span class="title function_">tb_brand</span><span class="params">(brand_name,company_name,ordered,description,status)</span></span><br><span class="line">    values(#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>useGeneratedKeys：是够获取自动增长的主键值。true表示获取 </p></li><li><p>keyProperty ：指定将获取到的主键值封装到哪儿个属性里</p></li></ul></blockquote><h3 id="4-动态修改"><a href="#4-动态修改" class="headerlink" title="4. 动态修改"></a>4. 动态修改</h3><blockquote><p>标签 set </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateDynamic&quot;</span>&gt;</span><br><span class="line">    update tb_brand</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">&quot;brandName != null and brandName !=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">        brand_name = #&#123;brandName&#125;,</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            company_name = #&#123;companyName&#125;,</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;ordered != null&quot;</span>&gt;</span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line"><span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h3 id="5-动态删除"><a href="#5-动态删除" class="headerlink" title="5. 动态删除"></a>5. 动态删除</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311191552005.png" alt="image-20231119155218943"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span><br><span class="line">    delete</span><br><span class="line">    from tb_brand</span><br><span class="line">    where id <span class="title function_">in</span> <span class="params">(</span></span><br><span class="line"><span class="params">        &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;id&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line"><span class="params">        #&#123;id&#125;</span></span><br><span class="line"><span class="params">        &lt;/foreach&gt;</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311191552385.png" alt="image-20231119155156304"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202311191553633.png" alt="image-20231119155329384"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/2023/10/18/JavaSE/"/>
      <url>/2023/10/18/JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131916855.png" alt="1c6fe76faf20d065a99ece2df488fdb"></p><p>cmd <code>javadoc -encoding UTF-8 -charset UTF-8 Main.java</code></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131916572.png" alt="c35fb6b94555bda9270341c3ec4c743"></p><p>形成API文档</p><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p>JDK: Java Development Kit</p><p>JRE: Java Runtime Environment</p><p>JVM: Java Virtual Machine</p><p>JDK &#x3D; JRE + java开发工具</p><p>JRE &#x3D; JVM + 核心类库</p><p>xx.java<code>源码 </code> –编译–&gt; xx.class<code>字节码</code> –运行–&gt;</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><p>基本数据类型</p><ul><li>数值型 <ul><li>整数类型 byte short int long</li><li>浮点类型 float double</li></ul></li><li>字符型 char</li><li>布尔型 boolean</li></ul></li><li><p>引用数据类型</p><p>类class    接口interface    数组[]</p><p>（String也是引用类型）</p></li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String判断是否相等"><a href="#String判断是否相等" class="headerlink" title="String判断是否相等"></a>String判断是否相等</h2><p><code>p1.name.equals(p2.name)</code>,而不用<code>p1 == p2</code></p><p>String 中<code>==</code>比较引用地址是否相同，<code>equals()</code> 比较字符串的内容是否相同</p><h2 id="String数据类型转换"><a href="#String数据类型转换" class="headerlink" title="String数据类型转换"></a>String数据类型转换</h2><ol><li><p>基本数据类型-&gt;String</p><p>num1 + “”</p></li><li><p>String-&gt;基本数据类型 <code>&quot;123&quot;√   &quot;hello&quot;X</code></p><p>int num1 &#x3D; Integer.parseInt(s);</p><p>float num2 &#x3D; Float.parseFloat(s);</p><hr><p>String-&gt;char:只能取其中一个字符</p><p>char c &#x3D;  s.charAt(0);</p></li></ol><h2 id="关于方法参数的String和String"><a href="#关于方法参数的String和String" class="headerlink" title="关于方法参数的String和String[]"></a>关于方法参数的String和String[]</h2><p>在 Java 中，String 和 String[] 都是引用类型，存储的是对象的引用。但是，**<code>String 类型的对象是不可变的</code>**，也就是说，一旦创建了一个 String 对象，就无法再修改它的值，任何对 String 对象的修改都会创建一个新的对象。而 String[] 类型的对象是可变的，也就是说，可以修改数组中的元素值。</p><p>当我们将一个 String[] 类型的变量传递给一个方法时，实际上传递的是该变量所引用的数组对象在内存中的地址。因此，当我们在方法中修改数组中的元素值时，对数组进行的修改会影响到原始数组，在方法返回后也能保留。而 String 类型因为不可变，<strong>修改即创建新的对象也就有了新的地址</strong>，所以方法中引用的地址的值没有改变，输出的结果也就没有改变</p><h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        System.out.println(str1.charAt(<span class="number">1</span>));  <span class="comment">// b  返回索引处的值</span></span><br><span class="line">        System.out.println(str1.codePointAt(<span class="number">1</span>));  <span class="comment">//98  返回索引处的Unicode码</span></span><br><span class="line">        System.out.println(str1.codePointBefore(<span class="number">1</span>));  <span class="comment">//97  返回索引处前一个值的Unicode码</span></span><br><span class="line">        System.out.println(str1.codePointCount(<span class="number">1</span>, <span class="number">3</span>));  <span class="comment">//2  (1,3)范围内字符串长度</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;AbcdE&quot;</span>;</span><br><span class="line">        System.out.println(str1.compareTo(str2));  <span class="comment">//32 按字典顺序比（Unicode），字符串比参数字符串大则返回一个 &gt;0 的数</span></span><br><span class="line">        System.out.println(str1.compareToIgnoreCase(str2));  <span class="comment">//0  按字典顺序表，但忽略大小写。等于时返回0</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equals(str2));  <span class="comment">// 判断两字符串内容是否相等</span></span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str2)); <span class="comment">// 同上，但不考虑大小写</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str3.concat(str1));  <span class="comment">//concat 和 + 都是连接字符串，但不改变原有字符串</span></span><br><span class="line">        System.out.println(str3 + str1);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;abcdeisstr1orstr2&quot;</span>;</span><br><span class="line">        System.out.println(str4.contains(str1));  <span class="comment">//contains 参数字符串包含在字符中，是则返回true，否则返回false</span></span><br><span class="line">        System.out.println(str4.contains(str2));  <span class="comment">//考虑大小写</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abcdeisstr1orstr2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abcdeisstr1orstr211111&quot;</span>.contentEquals(str5));</span><br><span class="line">        System.out.println(<span class="string">&quot;ABCDEisstr1orstr2&quot;</span>.contentEquals(str5));</span><br><span class="line">        System.out.println(str4.contentEquals(str5));  <span class="comment">//String和StringBuffer是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;                                    <span class="comment">// 复制char数组到str6</span></span><br><span class="line">        System.out.println(str6 = str6.copyValueOf(chars));  <span class="comment">// abcde String类型</span></span><br><span class="line">        System.out.println(str6);</span><br><span class="line">        <span class="type">char</span>[] chars2 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(str6 = str6.copyValueOf(chars2, <span class="number">1</span>, <span class="number">3</span>));  <span class="comment">//从索引1-3 复制到str6，闭区间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">str7</span> <span class="operator">=</span> <span class="string">&quot;HelloJava&quot;</span>;</span><br><span class="line">        System.out.println(str7.endsWith(<span class="string">&quot;a&quot;</span>));  <span class="comment">// 字符串后缀是否为参数字符串</span></span><br><span class="line">        System.out.println(str7.endsWith(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str8</span> <span class="operator">=</span> String.join(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;h&quot;</span>, str7);  <span class="comment">//将字符串用分隔符连接形成新字符串</span></span><br><span class="line">        System.out.println(str8);</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="？？？动态？静态？"><a href="#？？？动态？静态？" class="headerlink" title="？？？动态？静态？"></a>？？？动态？静态？</h2><p>有new的数组就是动态数组，直接给值的就是静态数组</p><ol><li><p>数组的拷贝</p><ul><li>静态创建数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1; <span class="comment">//引用传递，把arr2也指向arr1指向的地址</span></span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">20</span>;<span class="comment">//修改arr2的值，也会改变arr1的值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[<span class="number">3</span>] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[<span class="number">3</span>] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.lenth];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.lenth; i++)&#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125; <span class="comment">//值拷贝，arr1和arr2是相互独立的</span></span><br></pre></td></tr></table></figure><ul><li>动态创建数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; </span><br></pre></td></tr></table></figure></li></ol><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>方法名相同，参数类型、参数个数不同，这些方法互为重载</p><p>方法名、参数类型和参数个数都相同的方法，返回值不同，不能称为重载</p><blockquote><p>JVM通过方法签名（方法名称、参数类型、参数个数）来决定调用哪个方法，若多个方法签名相同，返回值不同，JVM无法判断调用哪个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不是重载 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num_a, <span class="type">int</span> num_b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (num_a + num_b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num_a, <span class="type">int</span> num_b)</span> &#123;</span><br><span class="line">        System.out.println(num_a + num_b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><h2 id="next-and-nextLine-获取输入的字符串"><a href="#next-and-nextLine-获取输入的字符串" class="headerlink" title="next() and nextLine() 获取输入的字符串"></a>next() and nextLine() 获取输入的字符串</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309142026826.png" alt="image-20230914202655295"></p><h2 id="读取前一般用-hasNext-or-hasNextLine-判断是否还有输入"><a href="#读取前一般用-hasNext-or-hasNextLine-判断是否还有输入" class="headerlink" title="读取前一般用 hasNext() or hasNextLine() 判断是否还有输入"></a>读取前一般用 hasNext() or hasNextLine() 判断是否还有输入</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309142027753.png" alt="image-20230914202750757"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为next在前，只能输入一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// next() and nextLine() 获取输入的字符串</span></span><br><span class="line">        <span class="comment">// 读取前一般用 hasNext() or hasNextLine() 判断是否还有输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;next()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;str1 = &quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;str2 = &quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next() and nextLine() 获取输入的字符串</span></span><br><span class="line">        <span class="comment">// 读取前一般用 hasNext() or hasNextLine() 判断是否还有输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextLine()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;str2 = &quot;</span> + str2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;next()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;str1 = &quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> cat.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">       System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变参数能作为形参的最后一位</span></span><br><span class="line"><span class="comment">//可当作数组使用，nums可作为数组名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>[菜鸟](<a href="https://www.runoob.com/java/java-enum.html">Java 枚举(enum) | 菜鸟教程 (runoob.com)</a>)</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>[菜鸟](<a href="https://www.runoob.com/w3cnote/java-annotation.html">Java 注解（Annotation） | 菜鸟教程 (runoob.com)</a>)</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ol><li><p>编译异常</p><p>FileNotFoundException  ClassNotFoundException</p><p>SQLException 操作数据库时，查询表可能发生异常</p><p>IOException 操作文件时，可能发生异常</p><p>EOFException 操作文件，到文件末尾可能发生异常</p><p>IlegalArguementException 参数异常</p></li><li><p>运行异常</p><p>NullPointerException  ArithmeticException  ArrayIndexOutOfBoundsException  ClassCastException</p><p>NumberFormatException</p></li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309162339975.png" alt="image-20230916233901783"></p><ol start="3"><li>（因为finally块必须执行）finally块执行完后，才会回来执行try或catch中的return或throw语句，若finally中有return或throw等终止访问的语句，则不会跳回执行，直接停止</li></ol><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309162305641.png" alt="image-20230916230504881"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的不是整数，请重新输入！&quot;</span>);</span><br><span class="line">                scanner.nextLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>try可以对应多个catch，但子类catch在前，父类在后</p><p>eg. catch(NullPointer…){…}  -&gt;  catch(Expection…){…} </p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309162306477.png" alt="image-20230916230629740"></p><h3 id="编译异常与运行异常"><a href="#编译异常与运行异常" class="headerlink" title="编译异常与运行异常"></a>编译异常与运行异常</h3><ol><li>编译异常，程序员必须显示处理</li><li>运行异常，程序员可以不处理，java有默认处理机制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译时异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    f2();  <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span>&#123;</span><br><span class="line">    f4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li><p>子类重写父类的方法时，抛出的异常 和父类抛出异常类型的一致  或 为父类抛出异常类型的子类型</p></li><li><p>如果方法中有try-catch，则不执行throws</p></li></ol><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>如果继承于<code>Exception</code>，为编译异常</li><li>如果继承于<code>RuntimeException</code>，为运行异常</li><li>一般为RuntiomeException，因为有默认处理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">882</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(age&gt;=<span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄要在18-120之间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄在18-120之间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throws-与-throw"><a href="#throws-与-throw" class="headerlink" title="throws 与 throw"></a>throws 与 throw</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309170006805.png" alt="image-20230917000636763"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309170009739.png" alt="image-20230917000912672"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309170009622.png" alt="image-20230917000947018"></p><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>三元运算符是一个整体（if-else每条语句是独立的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="literal">true</span>? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>):<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(obj1);</span><br><span class="line"><span class="comment">// 输出1.0  </span></span><br><span class="line"><span class="comment">// 原因：三元运算符语句中，Double的存在提升了优先级</span></span><br></pre></td></tr></table></figure><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="一、包装类"><a href="#一、包装类" class="headerlink" title="一、包装类"></a>一、包装类</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309171254137.png" alt="image-20230917125417981"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309171257327.png" alt="image-20230917125752903"></p><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><h4 id="基本类型-与-包装类型"><a href="#基本类型-与-包装类型" class="headerlink" title="基本类型 与 包装类型"></a>基本类型 与 包装类型</h4><ol><li>jdk5前，手动装箱、拆箱</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// valueOf() 方法用于返回给定参数的原生 Number 对象值</span></span><br><span class="line"><span class="comment">// 基本类型int -&gt; 包装类型Integer  手动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">122</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包装类型Integer -&gt; 基本类型int  手动拆箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">11</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> integer3.intValue();</span><br></pre></td></tr></table></figure><ol start="2"><li>自动装箱、拆箱</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱  底层：valueOf</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer4</span> <span class="operator">=</span> n3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱  底层：Value</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> integer4;</span><br></pre></td></tr></table></figure><h4 id="包装类型-与-String"><a href="#包装类型-与-String" class="headerlink" title="包装类型 与 String"></a>包装类型 与 String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包装类 -&gt; String</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> integer + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> integer.toString();</span><br><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(integer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; 包装类</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.parseInt(str4); <span class="comment">// int -&gt; Integer 自动装箱</span></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4); <span class="comment">// 构造器</span></span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题*"></a>面试题*</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(x == y); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要有基本数据类型，判断的是：值是否相等</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(k == h); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>解读：</p><blockquote><p>在Java中，使用<code>new Integer(i)</code>语法将创建一个新的 <code>Integer</code> 对象，无论 <code>i</code> 的值如何，都会产生一个新的对象，因此对象的地址是不同的。而Integer.valueOf()则不同。</p></blockquote><p>Integer m &#x3D; 1; -&gt; Integer m &#x3D; Integer.valueOf(1);</p><p>Integer n &#x3D; 1; -&gt; Integer n &#x3D; Integer.valueOf(1);</p><p>在valueOf的源码中，可知1在-128-127 的范围内，直接返回Integer</p><blockquote><p>在Java中，对于范围在-128到127之间的整数，使用<code>Integer.valueOf(int)</code>方法会返回一个缓存的<code>Integer</code>对象，<strong>这意味着对于相同的整数值，<code>Integer.valueOf</code>会返回相同的对象引用。</strong>这是Java的一种优化机制，旨在节省内存和提高性能。</p></blockquote><p>而 x、y &#x3D;128，不在此范围内，会返回 new Integer(x)，所以x、y指向的对象并不是同一个</p><p><strong>只要有基本数据类型，判断的是：值是否相等</strong></p><h2 id="二、String类"><a href="#二、String类" class="headerlink" title="二、String类"></a>二、String类</h2><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ol><li><p>String 对象用于保存字符串，也就是一组字符序列</p></li><li><p><code>name</code>是 String类型的变量，<code>“jack”</code>是字符串常量</p></li><li><p>String 是 final 类，不能被其他类继承</p></li><li><p>String 有属性 <code>private final char value[];</code> 用于存放字符串内容</p></li><li><p>value 是一个 final 类型，它的指向不可以修改，但单个字符内容可以改变。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 为 变量， &quot;jack&quot; &quot;tom&quot; 为常量</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于final</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] value = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 字符串变量中单个字符内容可以改变</span></span><br><span class="line">value[<span class="number">2</span>] = <span class="string">&#x27;d&#x27;</span>; </span><br><span class="line"><span class="type">char</span> [] v2 = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 字符串变量的指向不可以修改：value指向的地址 不能被赋值为 v2指向的地址</span></span><br><span class="line">value = v2;</span><br></pre></td></tr></table></figure><h3 id="String的内存布局"><a href="#String的内存布局" class="headerlink" title="String的内存布局"></a>String的内存布局</h3><h4 id="1、直接赋值-String-s-x3D-“hsp”"><a href="#1、直接赋值-String-s-x3D-“hsp”" class="headerlink" title="1、直接赋值 String s &#x3D; “hsp”;"></a>1、直接赋值 String s &#x3D; “hsp”;</h4><p>在栈中创建变量s</p><p>先在常量池中找，如果找到 “hsp” ，就让s指向它，如果常量池中没有，就创建一个并让s指向它</p><h4 id="2、调用构造器-String-s2-x3D-new-String-“hsp”"><a href="#2、调用构造器-String-s2-x3D-new-String-“hsp”" class="headerlink" title="2、调用构造器 String s2 &#x3D; new String(“hsp”);"></a>2、调用构造器 String s2 &#x3D; new String(“hsp”);</h4><p>在堆中开辟一块空间，其中维护着value这个char数组，并在栈中创建变量s2指向这块空间，</p><p>value也在常量池中找是否存在”hsp”，若不存在则创建并指向，存在则指向</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309171848987.png" alt="image-20230917184804653"></p><h3 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h3><blockquote><p>当调用inern时，如果常量池中包含一个 与本字符串内容一致的字符串时，返回池中的字符串。否则，将此String对象添加到池中，并返回此String对象的引用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">System.out.println(a == b.intern()); <span class="comment">// true</span></span><br><span class="line">System.out.println(b == b.intern()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li><p>两个字符串用 <code>==</code> 判断的是地址</p></li><li><p><code>b.intern()</code> 返回池中的字符串<code>&quot;hsp&quot;</code></p></li><li><p>把该地址（池中的）与 <code>a</code>的地址相比较，是<strong>一样</strong>的，都是<code>池中&quot;hsp&quot;</code>的地址</p></li><li><p>把该地址（池中的）与 <code>b</code>的地址相比较，是<strong>不一样</strong>的，<code>b</code>的地址是堆中<code>value</code>的地址</p></li></ol><h3 id="类的实例-–-对象中的name属性"><a href="#类的实例-–-对象中的name属性" class="headerlink" title="类的实例 – 对象中的name属性"></a>类的实例 – 对象中的name属性</h3><p>这不是<code>new</code>出来的</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309172043049.png" alt="image-20230917204339792"></p><h3 id="String对象特例"><a href="#String对象特例" class="headerlink" title="String对象特例"></a>String对象特例</h3><ol><li>String a &#x3D; “hello” + “abc”; 是创建了一个对象（java的机制）</li><li>String c &#x3D; a + b 时内存中有三个对象：先创建sb，再sb &#x3D; sb.append(“Hello”)， 再 sb &#x3D; sb.append(“abc”)，之后再new String(),value指向”Helloabc”，所以c是指向堆中new出来的对象，那个对象再指向常量池中的”Helloabc”</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309172110776.png" alt="image-20230917211033271"></p><h2 id="StringBuffer-和-StringBuillder-类"><a href="#StringBuffer-和-StringBuillder-类" class="headerlink" title="StringBuffer 和 StringBuillder 类"></a>StringBuffer 和 StringBuillder 类</h2><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309172134787.png" alt="image-20230917213359424"></p><h2 id="三、BigInteger-和-BigDecimal类"><a href="#三、BigInteger-和-BigDecimal类" class="headerlink" title="三、BigInteger 和 BigDecimal类"></a>三、BigInteger 和 BigDecimal类</h2><h3 id="1、BigInteger-存放-很大的整数"><a href="#1、BigInteger-存放-很大的整数" class="headerlink" title="1、BigInteger 存放 很大的整数"></a>1、BigInteger 存放 很大的整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建，数据用双引号引起</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;11111111111111111&quot;</span>);</span><br><span class="line"><span class="comment">// 运算，以+为例</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;2222&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">add</span> <span class="operator">=</span> b2.add(b1);</span><br></pre></td></tr></table></figure><h3 id="2、BigDecimal-存放-精度高的数"><a href="#2、BigDecimal-存放-精度高的数" class="headerlink" title="2、BigDecimal 存放 精度高的数"></a>2、BigDecimal 存放 精度高的数</h3><p> 创建、运算同<code>BigInteger</code></p><h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><p>问题：除法可能会抛出异常（除不尽）</p><p>解决：在方法参数添加<code>BigDecimal.ROUND_CEILING</code>，如果有无限循环小数，就会保留 分子 的精度。</p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><h2 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h2><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>单列集合 List、Set</p><p>双列集合 Map</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309191959577.png" alt="image-20230919195944622"></p><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p><strong>介绍</strong></p><ol><li><p>List中元素有序可重复，输出顺序与输入顺序一致</p></li><li><p>List集合中的每个元素都有其对应的顺序索引，从0开始</p></li></ol><p><strong>方法</strong></p><ol><li>add(Object ele)、add(int index,Object ele)、addAll</li><li>indexOf 、lastIndexOf</li><li>Object <strong>remove</strong>(int index)</li><li>Object <strong>set</strong>(int index,Object ele)</li><li>List <strong>subList</strong>(int fromIndex,int toIndex)</li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h3 id="ArrayList-和-Vector的区别"><a href="#ArrayList-和-Vector的区别" class="headerlink" title="ArrayList 和 Vector的区别"></a>ArrayList 和 Vector的区别</h3><p><strong>使用</strong></p><ol><li>ArrayList 适合单线程</li><li>Vector适合多线程</li></ol><p><strong>扩容</strong></p><ol><li>ArrayList 无参默认10，按1.5倍</li><li>Vector 无参默认10 ，按2倍</li></ol><h2 id="Set-接口"><a href="#Set-接口" class="headerlink" title="Set 接口"></a>Set 接口</h2><ol><li>无序、不能存放重复元素</li><li>取出顺序与存放顺序不同，但取出顺序不会改变</li><li>输出：迭代器、for each （不可用索引）</li></ol><h3 id="hashSet"><a href="#hashSet" class="headerlink" title="hashSet"></a>hashSet</h3><h4 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h4><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309201639980.png" alt="image-20230920163905669"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309201919829.png" alt="ce1ff2c66c0cd74c012548f1862d632"></p><p>在HashSet底层，add一个对象，会在底层new一个 Node 放到 table 里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组 + 链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">mike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;mike&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">nacy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;nacy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;tom&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = jack;</span><br><span class="line">        jack.next = mike;</span><br><span class="line">        mike.next=nacy;</span><br><span class="line">        table[<span class="number">0</span>] = tom;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            System.out.println(table[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Object item;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;item=&quot;</span> + item +</span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 输出</span><br><span class="line">Node&#123;item=tom, next=null&#125; </span><br><span class="line">null </span><br><span class="line">Node&#123;item=jack, next=Node&#123;item=mike, next=Node&#123;item=nacy, next=null&#125;&#125;&#125; </span><br><span class="line">null </span><br></pre></td></tr></table></figure><h4 id="HashSet-添加元素"><a href="#HashSet-添加元素" class="headerlink" title="HashSet 添加元素"></a>HashSet 添加元素</h4><ol><li>添加一个元素时，会先得到一个hash值，然后转换为索引值</li><li>根据这个索引值到table里找该位置是否为空</li><li>如果为空，直接放入</li><li>如果不为空，则用equals比较（也可用其他），如果相同，则放弃添加该元素，如果不相同，则添加在其后面（链表）</li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309201636025.png" alt="image-20230920163607314"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309202228133.png" alt="image-20230920222844130"></p><h4 id="练习"><a href="#练习" class="headerlink" title="*练习"></a>*练习</h4><p>hashCode() and equals()</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211050249.png" alt="image-20230921105014935"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未重写hashCode和equals，每new一个对象时，它们的hashCode都是不同的，即使内容一致，所以能存放到HashSet中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeshSetTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">mike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">5</span>);</span><br><span class="line">        hashSet.add(jack);</span><br><span class="line">        hashSet.add(mike);</span><br><span class="line">        hashSet.add(tom);</span><br><span class="line">        hashSet.add(jack);</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (Object o : hashSet) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Employee&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;jack&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">1</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写hashCode和equals</span></span><br><span class="line"><span class="comment">// equals 当name和age的值相同，返回true</span></span><br><span class="line"><span class="comment">// hashCode 在计算hashCode时，如果name和age的值相同，返回相同的hashCode值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeshSetTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">mike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">5</span>);</span><br><span class="line">        hashSet.add(jack);</span><br><span class="line">        hashSet.add(mike);</span><br><span class="line">        hashSet.add(tom);</span><br><span class="line">        hashSet.add(jack);</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (Object o : hashSet) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> age == employee.age &amp;&amp; Objects.equals(name, employee.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Employee&#123;name=<span class="string">&#x27;mike&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">22</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">1</span>&#125;</span><br><span class="line">Employee&#123;name=<span class="string">&#x27;jack&#x27;</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>1. </p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211117276.png" alt="image-20230921111754126"></p><p>Employee类中包含MyDate类，在判断重写Employee类的hashCode和equals时，注意也要重写MyDate类的hashCode和equals。</p><ol start="2"><li>hashCode() 和 equals() 都要重写，如果只重写一个，相同的数据还是能加入进去<ul><li>只重写hashCode()，相同的数据返回相同的hashcode，hashcode相同会进行equals()，默认比较地址，内容相同也是能加进去的。</li><li>只重写equals()，相同的内容hashcode不同，相同内容能加进去。</li></ul></li></ol><h3 id="LinkedHashSet-–-hashSet的子类"><a href="#LinkedHashSet-–-hashSet的子类" class="headerlink" title="LinkedHashSet – hashSet的子类"></a>LinkedHashSet – hashSet的子类</h3><h4 id="底层-1"><a href="#底层-1" class="headerlink" title="底层"></a>底层</h4><ol><li><p>底层为LinkedHashMap，维护了一个数组和双向链表</p></li><li><p>无法存放重复的数据</p></li><li><p>取出顺序与存放顺序一致（双向链表，当存放一个数据就接到链表）</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211133724.png" alt="image-20230921113331117"></p></li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="接口实现类的特点，以HashMap为例"><a href="#接口实现类的特点，以HashMap为例" class="headerlink" title="接口实现类的特点，以HashMap为例"></a>接口实现类的特点，以HashMap为例</h3><ol><li><p>Map 与 Collection 并列存在，Map 用于存放具有映射关系的 Key-Value（双列元素）</p></li><li><p>Map 中的 Key 和 Value 可以是<strong>任何引用类型的数据（Object）****（常用String）</strong>，会封装到 <strong>HashMap$Node</strong> 中（像HashSet中的table）：Node是HashMap的静态内部类</p></li><li><p>Map 中的 Key 不可重复，原因同 HashSet，如遇到相同的 Key，会发生 Value 替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;喜羊羊&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no2&quot;</span>, <span class="string">&quot;小灰灰&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// 输出  &#123;no2=小灰灰, no1=喜羊羊&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;喜羊羊&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no2&quot;</span>, <span class="string">&quot;小灰灰&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;麦当劳&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// 输出  &#123;no2=小灰灰, no1=麦当劳&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Map 中 Value 可重复</p></li><li><p>Key 和 Value 中可以有null，Key 只能有一个null，Value 能有多个null</p></li><li><p>Key 和 Value 存在单向一对一关系，可以通过 Key 找到 Value：get(Object key)</p></li><li><p>【】</p><p>Node -&gt; Entry -&gt; EntrySet</p><p>反过来理解：EntrySet 内部 Entry 的 Key 和 Value 是指向 Node 的</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211837391.png" alt="image-20230921183740232">  </p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211838588.png" alt="image-20230921183848035"></p><p>只是把table里的Node放在了 EntrySet里，所以EntrySet里的元素是对应指向Node的（类似变量名-&gt;对象）</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211832307.png" alt="image-20230921183255464"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211832849.png" alt="image-20230921183132160"></p></li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309211831900.png" alt="image-20230921183059035"></p><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><p>利用<code>map.KeySet()</code> 和 <code>map.Values()</code></p><ol><li>keyset</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// I.KeySet -- Set -- 2</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line"><span class="comment">// 1.for each</span></span><br><span class="line"><span class="keyword">for</span> (Object key : keyset) &#123;</span><br><span class="line">System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.iterator</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keyset.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(next + <span class="string">&quot;-&quot;</span> + map.get(next));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>valueCollection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// II.ValueCollection -- Collection -- 3</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">valueCollection</span> <span class="operator">=</span> map.values();</span><br></pre></td></tr></table></figure><ol start="3"><li>EntrySet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// III.EntrySet -- Set -- 2</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();   <span class="comment">// entrySet : EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line"><span class="comment">// 1.for each                    // entry : Map.Entry</span></span><br><span class="line"><span class="keyword">for</span> (Object entry : entrySet) &#123;  <span class="comment">// Map.Entry 提供了getKey() 和 getValue</span></span><br><span class="line"><span class="comment">// 把 entry 转成 Map.Entry</span></span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.Iterator</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line"><span class="comment">// iterator1 取出的是 HashMap$Node -实现-&gt; Map.Entry --&gt; 可以调用getKey() geyValue()</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309221248769.png" alt="image-20230922124837240"></p><h3 id="Properties-HashTable子类"><a href="#Properties-HashTable子类" class="headerlink" title="Properties(HashTable子类)"></a>Properties(HashTable子类)</h3><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309221253223.png" alt="image-20230922125338160"></p><h2 id="集合的选择"><a href="#集合的选择" class="headerlink" title="集合的选择"></a>集合的选择</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309221256785.png" alt="image-20230922125630772"></p><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309221315049.png" alt="image-20230922131515092"></p><h1 id="泛型（和模板很像）"><a href="#泛型（和模板很像）" class="headerlink" title="泛型（和模板很像）"></a>泛型（和模板很像）</h1><h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309241708831.png" alt="image-20230924170806920"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309241708412.png" alt="image-20230924170704570"></p><h2 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h2><p>泛型是与实例化相关，在创建对象时才确定类型。</p><p>不能不能用于数组、静态</p><h3 id="泛型的继承与通配符"><a href="#泛型的继承与通配符" class="headerlink" title="泛型的继承与通配符"></a>泛型的继承与通配符</h3><ol><li>泛型不具备有继承性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><ol start="2"><li>&lt; ? &gt; 支持任意类型</li><li>&lt; ? extends A &gt; 支持A类及A的<strong>子类</strong></li><li>&lt; ? super A &gt; 支持A类及A的<strong>父类</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;&#125;</span><br><span class="line">class B extends A&#123;&#125;</span><br><span class="line">class C extends A&#123;&#125;</span><br><span class="line">public class TpfTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;String&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;A&gt; list3 = new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;B&gt; list4 = new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;C&gt; list5 = new ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">    public static void print1(List&lt;?&gt; list)&#123;</span><br><span class="line">    // 所以类型都可以调用</span><br><span class="line">    &#125;</span><br><span class="line">    public static void print2(List&lt;? extends A&gt; list)&#123;</span><br><span class="line">    // A和A的子类可以调用：A B C</span><br><span class="line">    &#125;</span><br><span class="line">    public static void print3(List&lt;? super A&gt; list)&#123;</span><br><span class="line">    // A和A的父类可以调用：Object A</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><h3 id="定制排序sort"><a href="#定制排序sort" class="headerlink" title="定制排序sort"></a>定制排序sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">empList.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee emp1, Employee emp2)</span> &#123;</span><br><span class="line"><span class="comment">// 比较name</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> emp1.getName().compareTo(emp2.getName());</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// name相同，比较birthday，在MyDate中比较</span></span><br><span class="line">    <span class="keyword">return</span> emp1.getBirthday().compareTo(emp2.getBirthday());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jUnit"><a href="#jUnit" class="headerlink" title="jUnit"></a>jUnit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在方法或类上方写：@Test，再按Alt+Enter选择jUnit</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象创建流程"><a href="#对象创建流程" class="headerlink" title="对象创建流程"></a>对象创建流程</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131900416.png" alt="93e667a4cd2b3776a701a870eaff5d7"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">String name;</span><br><span class="line">Person(String n,<span class="type">int</span> a)&#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在main中</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小倩&quot;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ol><li><p>加载类信息</p></li><li><p>在堆中分配空间（地址）</p></li><li><p>完成对象初始化</p><ul><li>默认初始化 age &#x3D; 0   name &#x3D; null</li><li>显式初始化 age &#x3D; 90  name &#x3D; null</li><li>构造器的初始化 age &#x3D; 20  name &#x3D; “小倩”</li></ul></li><li><p>把对象在堆中的地址，返回给p</p></li></ol><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309131900152.png" alt="image-20230913190055529"></p><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><h2 id="使用呈现"><a href="#使用呈现" class="headerlink" title="使用呈现"></a>使用呈现</h2><ol><li><p>不使用toString，直接输出对象，为一个地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">      <span class="type">Dogs</span> <span class="variable">zhangDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dogs</span>();</span><br><span class="line">      zhangDog.setAge(<span class="number">2</span>);</span><br><span class="line">      zhangDog.setName(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">      zhangDog.setVariety(<span class="string">&quot;拉布拉多&quot;</span>);</span><br><span class="line">   </span><br><span class="line">      System.out.println(<span class="string">&quot;zhangDog = &quot;</span> + zhangDog);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangDog = com.google.bean.Dogs@74a14482</span><br></pre></td></tr></table></figure></li><li><p>使用toString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Dogs&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, variety=&#x27;&quot;</span> + variety + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, food=&#x27;&quot;</span> + food + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangDog = Dogs&#123;name=&#x27;jerry&#x27;, variety=&#x27;拉布拉多&#x27;, age=2, food=&#x27;null&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>在Dogs类中，按 <code>Alt </code>+ <code>Insert</code>，选择<code>toString</code>，全选生成</li><li>利于Lombok，在类上方编写<code>@ToString</code>或者<code>@Data</code></li></ol><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dogs类</span></span><br><span class="line"><span class="type">Dogs</span> <span class="variable">zhangDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dogs</span>();</span><br><span class="line">zhangDog = <span class="literal">null</span>;</span><br><span class="line">System.gc();</span><br></pre></td></tr></table></figure><p>一般不需要这么做，java能自动回收（JVM不能自动清就会爆内存）</p><h1 id="static与private"><a href="#static与private" class="headerlink" title="static与private"></a>static与private</h1><p><code>static</code>：实例字段在每个实例中都有自己的一个独立“空间”，但是静态字段只有一个共享“空间”，所有实例都会共享该字段。</p><p><strong>静态变量、静态方法，通过类名直接访问。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dogs</span>&#123;</span><br><span class="line"><span class="comment">/* 静态变量，只能静态方法调用</span></span><br><span class="line"><span class="comment">   plot是类中都有的且一样的，没必要每个对象都含有这个变量</span></span><br><span class="line"><span class="comment">   所以，创建static静态变量，静态变量是属于类的，</span></span><br><span class="line"><span class="comment">   在没有创建对象也是可以调用的</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   该变量不可随意改变，所以访问级别为private</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">plot</span> <span class="operator">=</span> <span class="string">&quot;NanG&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 静态方法</span></span><br><span class="line"><span class="comment">   plot为private，应该创建一个静态方法调用它</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   plot不属于对象，所以不用 this.plot</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPlot</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> plot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="static单例设计模式"><a href="#static单例设计模式" class="headerlink" title="static单例设计模式"></a>static单例设计模式</h1><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</p><p>这个类提供了一种访问其唯一对象的方法，可以直接访问，无需实例化该类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Earth.java 文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Earth</span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 私有构造器</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Earth</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个 私有的 静态的 地球实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Earth</span> <span class="variable">earthInstance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Earth</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 获取 静态对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Earth <span class="title function_">getEarthInstanc</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> earthInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在Main.java 文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Earth</span> <span class="variable">earthInstance</span> <span class="operator">=</span> Earth.getEarthInstance();</span><br><span class="line">        earthInstance.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 运行后输出 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法</p><p>super() 用父类的构造器</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="final变量：为常量，不能被修改"><a href="#final变量：为常量，不能被修改" class="headerlink" title="final变量：为常量，不能被修改"></a>final变量：为常量，不能被修改</h2><p><code>public final String COMMUNITY_NAME = &quot;NanG&quot;; </code></p><p>之后<code>COMMUNITY_NAME</code>就不能被修改了</p><h2 id="final方法：不能被重写"><a href="#final方法：不能被重写" class="headerlink" title="final方法：不能被重写"></a>final方法：不能被重写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adult</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isCook</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Puple</span> <span class="keyword">extends</span> <span class="title class_">Adult</span>&#123;</span><br><span class="line"><span class="comment">// 会报错，final方法不可以被重写</span></span><br><span class="line">    <span class="comment">// 但是可以Puple类可以用Adult类中的isCook()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCook</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final类：不能被继承"><a href="#final类：不能被继承" class="headerlink" title="final类：不能被继承"></a>final类：不能被继承</h2><h1 id="抽象-abstract"><a href="#抽象-abstract" class="headerlink" title="抽象 abstract"></a>抽象 abstract</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>Animal本质来说是没人用的，它是抽象的，它抽取了猫狗等动物的共性</p><p>抽象 — 具体</p><p>动物 — 狗</p><p>抽象的目的是为了概况这些具体事物</p><p><code>public abstract class Animal&#123;&#125; </code></p><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><p>想想一下，Animal类中barking这个方法，是所以动物都有的、统一起的行为，但所以动物的叫声都不一样，无法统一，所以得在具体类中声明它们的叫声</p><p><code>public abstract void barking();</code></p><p><strong>定义抽象方法，必须在抽象类中，且无body</strong></p><p><strong>一个类继承抽象类，这个类要重写父类中的抽象方法</strong></p><h1 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h1><p>属性是静态的</p><p><strong>接口中的方法都是抽象的</strong></p><p><strong>接口的实现</strong>implement &#x3D; 类的重写</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309141433462.png" alt="image-20230914143322195"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309141433354.png" alt="image-20230914143345977"></p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309141434815.png" alt="image-20230914143405813"></p><h1 id="抽象与接口的区别"><a href="#抽象与接口的区别" class="headerlink" title="抽象与接口的区别"></a>抽象与接口的区别</h1><p>抽象类是对具体事物的抽象</p><p>接口是对动作、行为进行抽象</p><p>[菜鸟教程例子](<a href="https://www.runoob.com/w3cnote/java-abstract-interface-different.html">深入理解 Java 的接口和抽象类 | 菜鸟教程 (runoob.com)</a>)</p><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309141455638.png" alt="image-20230914145516627"></p><ol><li><p>把三个功能都放到抽象类中，子类继承与该类时，所以的门都能报警，但有的门不一定具备报警的功能</p></li><li><p>把三个功能都放到接口中，其他类实现该接口时，是具备报警的功能，但不是具备报警功能的类能open and close ，比如火灾报警器</p></li><li><p>可以看出，门的 open and close 和 alarm 是属于不同的范畴，open and close <strong>是门固有的行为，是所有门的共性</strong>，但 alarm 不是。</p><p>因此最好的解决办法是单独将报警设计为一个接口，包含 alarm() 行为，Door 设计为单独的一个抽象类，包含 open 和 close 两种行为。再设计一个报警门继承 Door 类和实现 Alarm 接口。</p></li></ol><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态性是对象多种表现形式的体现。（花木兰替父从军、回归自己）</p><p>多态存在的三个必要条件：</p><ul><li><p>继承</p></li><li><p>重写</p></li><li><p>父类引用指向子类</p><p>（花木兰替父从军 HuaHu huahu &#x3D; new HuaMuLan()）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationRun</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向上转型  替父从军</span></span><br><span class="line">        <span class="type">HuaHu</span> <span class="variable">huaHu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaMuLan</span>();</span><br><span class="line">        System.out.println(huaHu.name);</span><br><span class="line">        System.out.println(huaHu.age);</span><br><span class="line">        huaHu.fight();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  仗打完了，回归自己</span></span><br><span class="line">        <span class="type">HuaMuLan</span> <span class="variable">huaMuLan</span> <span class="operator">=</span> (HuaMuLan) huaHu;</span><br><span class="line">        huaMuLan.sayMe();</span><br><span class="line">        System.out.println(huaMuLan.name);</span><br><span class="line">        System.out.println(huaMuLan.age);</span><br><span class="line">        huaMuLan.dressing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaHu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;HuaHu&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sayMe</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是HuaHu，今年45&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;干架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaMuLan</span> <span class="keyword">extends</span> <span class="title class_">HuaHu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;HuaMuLan&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">19</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sayMe</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是HuaMuLan，今年19&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dressing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打扮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><blockquote><p>匿名内部类可以使你的代码更加简洁，你可以在定义一个类的同时对其进行实例化。它与局部类很相似，不同的是它没有类名，如果某个局部类你只需要用一次，那么你就可以使用匿名内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationRun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Human</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;eating&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        test.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Human</span>()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;eating&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.eat();</span><br></pre></td></tr></table></figure><h1 id="文件读写第三方jar包"><a href="#文件读写第三方jar包" class="headerlink" title="文件读写第三方jar包"></a>文件读写第三方jar包</h1><p><img src="https://ezcatcat-picgo.oss-cn-guangzhou.aliyuncs.com/img/202309142008682.png" alt="image-20230914200732648"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2023/04/17/First_Blog_Post/"/>
      <url>/2023/04/17/First_Blog_Post/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><hr><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is row20</span><br><span class="line"></span><br><span class="line">This is row22</span><br><span class="line"></span><br><span class="line">新起段落需要在两个段之间空一行</span><br></pre></td></tr></table></figure><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在末尾添加2个空格  </span><br><span class="line">然后直接回车</span><br><span class="line">就能换行了  </span><br></pre></td></tr></table></figure><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p><code>**粗体**</code><br><strong>左右各加两个star</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p><code>*斜体*</code><br><em>左右各加一个star</em></p><h2 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h2><p><code>***粗斜体***</code><br><em><strong>左右各加三个star</strong></em></p><h2 id="划线"><a href="#划线" class="headerlink" title="划线"></a><del>划线</del></h2><p><code> ~~划线~~</code><br><del>左右各加两个波浪号</del></p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="单段引用"><a href="#单段引用" class="headerlink" title="单段引用"></a>单段引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是单段引用 </span><br></pre></td></tr></table></figure><blockquote><p>这是单段引用</p></blockquote><h2 id="多段块引用"><a href="#多段块引用" class="headerlink" title="多段块引用"></a>多段块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是第一段</span></span><br><span class="line"><span class="quote">&gt; 这是第二段</span></span><br><span class="line"><span class="quote">&gt; 这是第三段</span></span><br></pre></td></tr></table></figure><blockquote><p>这是第一段<br>这是第二段<br>这是第三段</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是第一段</span></span><br><span class="line"><span class="quote">&gt; 这是第二段</span></span><br><span class="line">&gt;&gt; 这是第二段里的一个引用</span><br><span class="line">&gt;这是第三段</span><br></pre></td></tr></table></figure><blockquote><p>这是第一段<br>这是第二段</p><blockquote><p>这是第二段里的一个引用<br>这是第三段</p></blockquote></blockquote><h2 id="其他元素引用"><a href="#其他元素引用" class="headerlink" title="其他元素引用"></a>其他元素引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 普通引用</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 第二段</span></span><br><span class="line">&gt;- （圈圈）这是第二段的圈圈的引用</span><br><span class="line">&gt;&gt;- 圈圈的引用</span><br><span class="line">&gt;&gt;&gt;- 圈圈的引用的引用</span><br><span class="line"><span class="quote">&gt; haha</span></span><br><span class="line">&gt;- 这是带圈圈的第二段</span><br><span class="line"><span class="quote">&gt; 第三段：发现在&#x27;&gt;&#x27;后面加上&#x27;-&#x27;，会让这一段成为上一段的嵌套段</span></span><br><span class="line"><span class="quote">&gt; 为什么出不去了？</span></span><br></pre></td></tr></table></figure><blockquote><p>普通引用</p><p>第二段</p><ul><li>（圈圈）这是第二段的圈圈的引用<blockquote><ul><li>圈圈的引用<blockquote><ul><li>圈圈的引用的引用<br>haha</li></ul></blockquote></li></ul></blockquote></li><li>这是带圈圈的第二段<br>第三段：发现在’&gt;’后面加上’-‘，会让这一段成为上一段的嵌套段<br>为什么出不去了？</li></ul></blockquote><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote><p>在内容前加上数字及一个. ，数字可以无序，但渲染出来的是有序的。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> first</span><br><span class="line"><span class="bullet">2.</span> second</span><br><span class="line"><span class="bullet">   1.</span> second 1</span><br><span class="line"><span class="bullet">   2.</span> second 2</span><br><span class="line"><span class="bullet">   5.</span> second 5</span><br><span class="line"><span class="bullet">3.</span> four</span><br><span class="line"><span class="bullet">4.</span> six</span><br></pre></td></tr></table></figure><ol><li>first</li><li>second<ol><li>second 1</li><li>second 2</li><li>second 5</li></ol></li><li>four</li><li>six</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote><p>在内容前加上’-‘ 或 ‘+’ 或 ‘*’ </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> first</span><br><span class="line"><span class="bullet">-</span> second</span><br><span class="line"><span class="bullet">  -</span> second 1</span><br><span class="line"><span class="bullet">  -</span> second 3</span><br><span class="line"><span class="bullet">-</span> three</span><br><span class="line"><span class="bullet">-</span> four</span><br><span class="line"><span class="bullet">+</span> 变更内容前的符号会换段落</span><br><span class="line"><span class="bullet">+</span> 这是+</span><br><span class="line"><span class="bullet">+</span> six</span><br></pre></td></tr></table></figure><ul><li>first</li><li>second<ul><li>second 1</li><li>second 3</li></ul></li><li>three</li><li>four</li></ul><ul><li>变更内容前的符号会换段落</li><li>这是+</li><li>six</li></ul><hr><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以下三种均可表示分割线</span><br><span class="line"></span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="制作表格"><a href="#制作表格" class="headerlink" title="制作表格"></a>制作表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入 | 输出 |</span><br><span class="line">| ---  | --- | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>x</td><td>y</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><h3 id="左对齐"><a href="#左对齐" class="headerlink" title="左对齐"></a>左对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| :--  | :--- | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">输入变量</th><th align="right">输出变量</th></tr></thead><tbody><tr><td align="right">x</td><td align="right">y</td></tr><tr><td align="right">2</td><td align="right">4</td></tr></tbody></table><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| :--:  | :---: | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">输入变量</th><th align="center">输出变量</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">y</td></tr><tr><td align="center">2</td><td align="center">4</td></tr></tbody></table><h3 id="右对齐"><a href="#右对齐" class="headerlink" title="右对齐"></a>右对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 输入变量 | 输出变量 |</span><br><span class="line">| --:  | ---: | </span><br><span class="line">| x    |y    |</span><br><span class="line">| 2    | 4   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">输入变量</th><th align="right">输出变量</th></tr></thead><tbody><tr><td align="right">x</td><td align="right">y</td></tr><tr><td align="right">2</td><td align="right">4</td></tr></tbody></table><hr><h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><h2 id="代码句"><a href="#代码句" class="headerlink" title="代码句"></a>代码句</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a <span class="code">`word`</span> !</span><br></pre></td></tr></table></figure><p>This is a <code>word</code> !</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行   <span class="code">```编译语言</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            你的代码</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">最后一行 ```</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="纯图片"><a href="#纯图片" class="headerlink" title="纯图片"></a>纯图片</h2><blockquote><p>! [ <em>图片描述</em> ] ( <em>图片链接</em> )</p></blockquote><p><img src="https://images.pexels.com/photos/1261728/pexels-photo-1261728.jpeg?auto=compress&cs=tinysrgb&w=600" alt="这是图片"></p><h2 id="含链接的图片"><a href="#含链接的图片" class="headerlink" title="含链接的图片"></a>含链接的图片</h2><blockquote><p>[![ <em>图片描述</em> ] ( <em>图片链接</em> )] ( <em>跳转链接</em> )</p></blockquote><p><a href="https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png"><img src="https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png" alt="404"></a></p><hr><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h2><blockquote><p>[链接描述] (链接)</p></blockquote><p>这是一个链接 <a href="https://ezcatcat.github.io/">我的博客</a></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="网站-or-邮箱"><a href="#网站-or-邮箱" class="headerlink" title="网站 or 邮箱"></a>网站 or 邮箱</h3><blockquote><p>&lt; 网站链接 or 邮箱地址 &gt;</p></blockquote><p><a href="https://ezcatcat.github.io/">https://EzCatcat.github.io</a></p><p><a href="mailto:&#54;&#x33;&#x30;&#x32;&#50;&#x37;&#x36;&#x35;&#56;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#54;&#x33;&#x30;&#x32;&#50;&#x37;&#x36;&#x35;&#56;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p><h3 id="包含其他语法"><a href="#包含其他语法" class="headerlink" title="包含其他语法"></a>包含其他语法</h3><p>这是<a href="https://ezcatcat.github.io/"><em>我的博客</em></a><br>这是 <a href="https://ezcatcat.github.io/"><strong>我的博客</strong></a><br>这是 <a href="https://ezcatcat.github.io/"><code>我的博客</code></a></p><hr><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><blockquote><p>点击正文中的脚注，会自动跳转转到脚注注释</p></blockquote><blockquote><p>正文中，[^ 描述]  , 描述：可以用 数字 or 英文 or 汉字<br>正文外，解释意思，[^ 描述]: xxx</p></blockquote><p>Here have a footnote <a href="footnote_one">^1</a> ,you can see.<a href="footnote_two">^footnote</a>.</p><hr><h1 id="任务列表框"><a href="#任务列表框" class="headerlink" title="任务列表框"></a>任务列表框</h1><blockquote><p>复选框格式： - [ ]  or - [x]<br>注意： - 与 [] 中间要有空格，[]中需包含一个 空格 or x </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 数电</span><br><span class="line"><span class="bullet">-</span> [x] 实验报告</span><br><span class="line"><span class="bullet">-</span> [ ] 高数</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 数电</li><li><input checked="" disabled="" type="checkbox"> 实验报告</li><li><input disabled="" type="checkbox"> 高数</li></ul><hr><h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><h2 id="从-emojipedia-复制粘贴到代码中"><a href="#从-emojipedia-复制粘贴到代码中" class="headerlink" title="从 emojipedia 复制粘贴到代码中"></a>从 <a href="https://emojipedia.org/">emojipedia</a> 复制粘贴到代码中</h2><p>Grapes🍇</p><h2 id="运用emoji符号简码"><a href="#运用emoji符号简码" class="headerlink" title="运用emoji符号简码"></a>运用emoji符号简码</h2><blockquote><p>在两个冒号中的，输入符号名称</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ :joy:</span><br><span class="line"></span><br><span class="line">哭哭 :cry:</span><br><span class="line"></span><br><span class="line">apple :apple:</span><br></pre></td></tr></table></figure><p>去露营了！ :tent: 很快回来。</p><p>真好笑！ :joy:</p><p>哭哭 :cry:</p><p>apple :apple:</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/15/hello_world/"/>
      <url>/2023/04/15/hello_world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
